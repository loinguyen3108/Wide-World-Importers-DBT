{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.0", "generated_at": "2023-05-22T08:54:50.964681Z", "invocation_id": "22cade0f-674c-4871-a5e2-6baf361d3a2e", "env": {}, "project_id": "5fb79d43fc09dd44a76e1c10afd5faa3", "user_id": "ee88e96d-d06c-44ec-a0fc-9caeae2efc4b", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.dbt_wwi.stg_purchasing__suppliers": {"database": "postgres", "schema": "dev", "name": "stg_purchasing__suppliers", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/purchasing/stg_purchasing__suppliers.sql", "original_file_path": "models/staging/purchasing/stg_purchasing__suppliers.sql", "unique_id": "model.dbt_wwi.stg_purchasing__suppliers", "fqn": ["dbt_wwi", "staging", "purchasing", "stg_purchasing__suppliers"], "alias": "stg_purchasing__suppliers", "checksum": {"name": "sha256", "checksum": "c6ecb6d09283617b44365293840793eb805d5ea9155dc36fbb34e1508548314f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged supplier data from wwi purchasing.", "columns": {"supplier_id": {"name": "supplier_id", "description": "The primary key for suppliers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "Supplier name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/purchasing/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684219952.7940714, "relation_name": "\"postgres\".\"dev\".\"stg_purchasing__suppliers\"", "raw_code": "with\n\nsource as (\n\n    select * from {{ source('purchasing', 'suppliers') }}\n\n),\n\ntransformed as (\n\n    select\n\n        supplierid as supplier_id,\n        suppliername as supplier_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["purchasing", "suppliers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.purchasing.suppliers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/purchasing/stg_purchasing__suppliers.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"postgres\".\"purchasing\".\"suppliers\"\n\n),\n\ntransformed as (\n\n    select\n\n        supplierid as supplier_id,\n        suppliername as supplier_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_stg_purchasing__suppliers_supplier_id.806200ef00": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('stg_purchasing__suppliers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_purchasing__suppliers_supplier_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_purchasing__suppliers_supplier_id.sql", "original_file_path": "models/staging/purchasing/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_purchasing__suppliers_supplier_id.806200ef00", "fqn": ["dbt_wwi", "staging", "purchasing", "unique_stg_purchasing__suppliers_supplier_id"], "alias": "unique_stg_purchasing__suppliers_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219952.7952123, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_purchasing__suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_purchasing__suppliers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/purchasing/schema.yaml/unique_stg_purchasing__suppliers_supplier_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    supplier_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_purchasing__suppliers\"\nwhere supplier_id is not null\ngroup by supplier_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.stg_purchasing__suppliers", "attached_node": "model.dbt_wwi.stg_purchasing__suppliers"}, "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_id.2947739a50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('stg_purchasing__suppliers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_purchasing__suppliers_supplier_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_purchasing__suppliers_supplier_id.sql", "original_file_path": "models/staging/purchasing/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_id.2947739a50", "fqn": ["dbt_wwi", "staging", "purchasing", "not_null_stg_purchasing__suppliers_supplier_id"], "alias": "not_null_stg_purchasing__suppliers_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219952.7970903, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_purchasing__suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_purchasing__suppliers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/purchasing/schema.yaml/not_null_stg_purchasing__suppliers_supplier_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supplier_id\nfrom \"postgres\".\"dev\".\"stg_purchasing__suppliers\"\nwhere supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.stg_purchasing__suppliers", "attached_node": "model.dbt_wwi.stg_purchasing__suppliers"}, "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_name.76903e56be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_name", "model": "{{ get_where_subquery(ref('stg_purchasing__suppliers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_purchasing__suppliers_supplier_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_purchasing__suppliers_supplier_name.sql", "original_file_path": "models/staging/purchasing/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_name.76903e56be", "fqn": ["dbt_wwi", "staging", "purchasing", "not_null_stg_purchasing__suppliers_supplier_name"], "alias": "not_null_stg_purchasing__suppliers_supplier_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219952.79876, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_purchasing__suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_purchasing__suppliers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/purchasing/schema.yaml/not_null_stg_purchasing__suppliers_supplier_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supplier_name\nfrom \"postgres\".\"dev\".\"stg_purchasing__suppliers\"\nwhere supplier_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_name", "file_key_name": "models.stg_purchasing__suppliers", "attached_node": "model.dbt_wwi.stg_purchasing__suppliers"}, "model.dbt_wwi.stg_warehouse__package_types": {"database": "postgres", "schema": "dev", "name": "stg_warehouse__package_types", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/warehouse/stg_warehouse__package_types.sql", "original_file_path": "models/staging/warehouse/stg_warehouse__package_types.sql", "unique_id": "model.dbt_wwi.stg_warehouse__package_types", "fqn": ["dbt_wwi", "staging", "warehouse", "stg_warehouse__package_types"], "alias": "stg_warehouse__package_types", "checksum": {"name": "sha256", "checksum": "a153e29b7bcad5f4cead115714c85a1c271d17f19487d534c242e7474b76ac97"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged package type data from wwi warehouse.", "columns": {"package_type_id": {"name": "package_type_id", "description": "The primary key for package_types.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_type_name": {"name": "package_type_name", "description": "Package type name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/warehouse/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684219982.080168, "relation_name": "\"postgres\".\"dev\".\"stg_warehouse__package_types\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('warehouse', 'packagetypes') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        packagetypeid as package_type_id,\n        packagetypename as package_type_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["warehouse", "packagetypes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.warehouse.packagetypes"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/stg_warehouse__package_types.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"warehouse\".\"packagetypes\"\n\n),\n\ntransformed as (\n\n    select\n        \n        packagetypeid as package_type_id,\n        packagetypename as package_type_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_warehouse__colors": {"database": "postgres", "schema": "dev", "name": "stg_warehouse__colors", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/warehouse/stg_warehouse__colors.sql", "original_file_path": "models/staging/warehouse/stg_warehouse__colors.sql", "unique_id": "model.dbt_wwi.stg_warehouse__colors", "fqn": ["dbt_wwi", "staging", "warehouse", "stg_warehouse__colors"], "alias": "stg_warehouse__colors", "checksum": {"name": "sha256", "checksum": "135ccca2fb58104b3ca4e430408ca6fdf9c11b4daf2fe5dcc1831dec31107b4b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged color data from wwi warehouse.", "columns": {"color_id": {"name": "color_id", "description": "The primary key for colors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "color_name": {"name": "color_name", "description": "Color name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/warehouse/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684219982.081199, "relation_name": "\"postgres\".\"dev\".\"stg_warehouse__colors\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('warehouse', 'colors') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        colorid as color_id,\n        colorname as color_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["warehouse", "colors"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.warehouse.colors"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/stg_warehouse__colors.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"warehouse\".\"colors\"\n\n),\n\ntransformed as (\n\n    select\n        \n        colorid as color_id,\n        colorname as color_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_stg_warehouse__package_types_package_type_id.72a65a1cd9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "package_type_id", "model": "{{ get_where_subquery(ref('stg_warehouse__package_types')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_warehouse__package_types_package_type_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_warehouse__package_types_package_type_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_warehouse__package_types_package_type_id.72a65a1cd9", "fqn": ["dbt_wwi", "staging", "warehouse", "unique_stg_warehouse__package_types_package_type_id"], "alias": "unique_stg_warehouse__package_types_package_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219982.0822718, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__package_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__package_types"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/unique_stg_warehouse__package_types_package_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    package_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_warehouse__package_types\"\nwhere package_type_id is not null\ngroup by package_type_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "package_type_id", "file_key_name": "models.stg_warehouse__package_types", "attached_node": "model.dbt_wwi.stg_warehouse__package_types"}, "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_id.8bf8266d62": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "package_type_id", "model": "{{ get_where_subquery(ref('stg_warehouse__package_types')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__package_types_package_type_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__package_types_package_type_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_id.8bf8266d62", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__package_types_package_type_id"], "alias": "not_null_stg_warehouse__package_types_package_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219982.0840776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__package_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__package_types"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__package_types_package_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect package_type_id\nfrom \"postgres\".\"dev\".\"stg_warehouse__package_types\"\nwhere package_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "package_type_id", "file_key_name": "models.stg_warehouse__package_types", "attached_node": "model.dbt_wwi.stg_warehouse__package_types"}, "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_name.a94b2a57ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "package_type_name", "model": "{{ get_where_subquery(ref('stg_warehouse__package_types')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__package_types_package_type_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__package_types_package_type_name.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_name.a94b2a57ef", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__package_types_package_type_name"], "alias": "not_null_stg_warehouse__package_types_package_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219982.0857522, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__package_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__package_types"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__package_types_package_type_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect package_type_name\nfrom \"postgres\".\"dev\".\"stg_warehouse__package_types\"\nwhere package_type_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "package_type_name", "file_key_name": "models.stg_warehouse__package_types", "attached_node": "model.dbt_wwi.stg_warehouse__package_types"}, "test.dbt_wwi.unique_stg_warehouse__colors_color_id.cfaa63344b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "color_id", "model": "{{ get_where_subquery(ref('stg_warehouse__colors')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_warehouse__colors_color_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_warehouse__colors_color_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_warehouse__colors_color_id.cfaa63344b", "fqn": ["dbt_wwi", "staging", "warehouse", "unique_stg_warehouse__colors_color_id"], "alias": "unique_stg_warehouse__colors_color_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219982.087452, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__colors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__colors"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/unique_stg_warehouse__colors_color_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    color_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_warehouse__colors\"\nwhere color_id is not null\ngroup by color_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "color_id", "file_key_name": "models.stg_warehouse__colors", "attached_node": "model.dbt_wwi.stg_warehouse__colors"}, "test.dbt_wwi.not_null_stg_warehouse__colors_color_id.4ea7b6e380": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "color_id", "model": "{{ get_where_subquery(ref('stg_warehouse__colors')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__colors_color_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__colors_color_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__colors_color_id.4ea7b6e380", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__colors_color_id"], "alias": "not_null_stg_warehouse__colors_color_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219982.0893893, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__colors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__colors"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__colors_color_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect color_id\nfrom \"postgres\".\"dev\".\"stg_warehouse__colors\"\nwhere color_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "color_id", "file_key_name": "models.stg_warehouse__colors", "attached_node": "model.dbt_wwi.stg_warehouse__colors"}, "test.dbt_wwi.not_null_stg_warehouse__colors_color_name.055f820d71": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "color_name", "model": "{{ get_where_subquery(ref('stg_warehouse__colors')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__colors_color_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__colors_color_name.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__colors_color_name.055f820d71", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__colors_color_name"], "alias": "not_null_stg_warehouse__colors_color_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219982.0911088, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__colors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__colors"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__colors_color_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect color_name\nfrom \"postgres\".\"dev\".\"stg_warehouse__colors\"\nwhere color_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "color_name", "file_key_name": "models.stg_warehouse__colors", "attached_node": "model.dbt_wwi.stg_warehouse__colors"}, "model.dbt_wwi.stg_warehouse__stock_items": {"database": "postgres", "schema": "dev", "name": "stg_warehouse__stock_items", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/warehouse/stg_warehouse__stock_items.sql", "original_file_path": "models/staging/warehouse/stg_warehouse__stock_items.sql", "unique_id": "model.dbt_wwi.stg_warehouse__stock_items", "fqn": ["dbt_wwi", "staging", "warehouse", "stg_warehouse__stock_items"], "alias": "stg_warehouse__stock_items", "checksum": {"name": "sha256", "checksum": "d95d836886e29ef7d12cd4302138bd7bb09621a53c34ba1be52047dceb677656"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged stock time data from wwi warehouse.", "columns": {"stock_item_id": {"name": "stock_item_id", "description": "The primary key for stock items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_id": {"name": "supplier_id", "description": "The foreign key for stock_items and supplier (purchasing).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "color_id": {"name": "color_id", "description": "The foreign key for stock_items and colors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_package_id": {"name": "unit_package_id", "description": "The foreign key for stock_items and package_types.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stock_item_name": {"name": "stock_item_name", "description": "Stock item name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Stock item brand.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "size": {"name": "size", "description": "Stock item size.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "barcode": {"name": "barcode", "description": "Stock item barcode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "Stock item tax rate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Stock item unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recommended_retail_price": {"name": "recommended_retail_price", "description": "Stock item retail price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "typical_weight_per_unit": {"name": "typical_weight_per_unit", "description": "Stock item weight per unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Stock item tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity_per_outer": {"name": "quantity_per_outer", "description": "Stock item quantity per outer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "custom_fields": {"name": "custom_fields", "description": "Stock item extend details.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/warehouse/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684219986.1392717, "relation_name": "\"postgres\".\"dev\".\"stg_warehouse__stock_items\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('warehouse', 'stockitems') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        stockitemid as stock_item_id,\n        supplierid as supplier_id,\n        colorid as color_id,\n        unitpackageid as unit_package_id,\n        stockitemname as stock_item_name,\n        brand,\n        \"Size\" as size,\n        barcode,\n        taxrate as tax_rate,\n        unitprice as unit_price,\n        recommendedretailprice as recommended_retail_price,\n        typicalweightperunit as typical_weight_per_unit,\n        tags,\n        quantityperouter as quantity_per_outer,\n        cast(customfields as json) as custom_fields\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["warehouse", "stockitems"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.warehouse.stockitems"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/stg_warehouse__stock_items.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"warehouse\".\"stockitems\"\n\n),\n\ntransformed as (\n\n    select\n        \n        stockitemid as stock_item_id,\n        supplierid as supplier_id,\n        colorid as color_id,\n        unitpackageid as unit_package_id,\n        stockitemname as stock_item_name,\n        brand,\n        \"Size\" as size,\n        barcode,\n        taxrate as tax_rate,\n        unitprice as unit_price,\n        recommendedretailprice as recommended_retail_price,\n        typicalweightperunit as typical_weight_per_unit,\n        tags,\n        quantityperouter as quantity_per_outer,\n        cast(customfields as json) as custom_fields\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_stg_warehouse__stock_items_stock_item_id.5a8e549571": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stock_item_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_warehouse__stock_items_stock_item_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_warehouse__stock_items_stock_item_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_warehouse__stock_items_stock_item_id.5a8e549571", "fqn": ["dbt_wwi", "staging", "warehouse", "unique_stg_warehouse__stock_items_stock_item_id"], "alias": "unique_stg_warehouse__stock_items_stock_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.1403487, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/unique_stg_warehouse__stock_items_stock_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    stock_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere stock_item_id is not null\ngroup by stock_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stock_item_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_id.48b59f2744": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stock_item_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_stock_item_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_stock_item_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_id.48b59f2744", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_stock_item_id"], "alias": "not_null_stg_warehouse__stock_items_stock_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.1422296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_stock_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stock_item_id\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere stock_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stock_item_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_supplier_id.c71279a24c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_supplier_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_supplier_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_supplier_id.c71279a24c", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_supplier_id"], "alias": "not_null_stg_warehouse__stock_items_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.1439085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_supplier_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supplier_id\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_.6709491269": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_purchasing__suppliers')", "field": "supplier_id", "column_name": "supplier_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_warehouse__s_f90125a7195673ff4584c5cb0ebcb243.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_.6709491269", "fqn": ["dbt_wwi", "staging", "warehouse", "relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_"], "alias": "relationships_stg_warehouse__s_f90125a7195673ff4584c5cb0ebcb243", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_warehouse__s_f90125a7195673ff4584c5cb0ebcb243", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_warehouse__s_f90125a7195673ff4584c5cb0ebcb243"}, "created_at": 1684219986.1457217, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_warehouse__s_f90125a7195673ff4584c5cb0ebcb243\") }}", "language": "sql", "refs": [{"name": "stg_purchasing__suppliers", "package": null, "version": null}, {"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_purchasing__suppliers", "model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/relationships_stg_warehouse__s_f90125a7195673ff4584c5cb0ebcb243.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select supplier_id as from_field\n    from \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\n    where supplier_id is not null\n),\n\nparent as (\n    select supplier_id as to_field\n    from \"postgres\".\"dev\".\"stg_purchasing__suppliers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_.766a0063a5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_warehouse__colors')", "field": "color_id", "column_name": "color_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_warehouse__s_03d37d8fc15577374623dd178457f064.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_.766a0063a5", "fqn": ["dbt_wwi", "staging", "warehouse", "relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_"], "alias": "relationships_stg_warehouse__s_03d37d8fc15577374623dd178457f064", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_warehouse__s_03d37d8fc15577374623dd178457f064", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_warehouse__s_03d37d8fc15577374623dd178457f064"}, "created_at": 1684219986.1945944, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_warehouse__s_03d37d8fc15577374623dd178457f064\") }}", "language": "sql", "refs": [{"name": "stg_warehouse__colors", "package": null, "version": null}, {"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__colors", "model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/relationships_stg_warehouse__s_03d37d8fc15577374623dd178457f064.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select color_id as from_field\n    from \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\n    where color_id is not null\n),\n\nparent as (\n    select color_id as to_field\n    from \"postgres\".\"dev\".\"stg_warehouse__colors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "color_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_package_id.408f335d10": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_package_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_unit_package_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_unit_package_id.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_package_id.408f335d10", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_unit_package_id"], "alias": "not_null_stg_warehouse__stock_items_unit_package_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.198602, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_unit_package_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_package_id\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere unit_package_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_package_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_.cbcc273fc1": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_warehouse__package_types')", "field": "package_type_id", "column_name": "unit_package_id", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_warehouse__s_53ecca426810439c1bc59b26bffb812f.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_.cbcc273fc1", "fqn": ["dbt_wwi", "staging", "warehouse", "relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_"], "alias": "relationships_stg_warehouse__s_53ecca426810439c1bc59b26bffb812f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_warehouse__s_53ecca426810439c1bc59b26bffb812f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_warehouse__s_53ecca426810439c1bc59b26bffb812f"}, "created_at": 1684219986.2004411, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_warehouse__s_53ecca426810439c1bc59b26bffb812f\") }}", "language": "sql", "refs": [{"name": "stg_warehouse__package_types", "package": null, "version": null}, {"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__package_types", "model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/relationships_stg_warehouse__s_53ecca426810439c1bc59b26bffb812f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select unit_package_id as from_field\n    from \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\n    where unit_package_id is not null\n),\n\nparent as (\n    select package_type_id as to_field\n    from \"postgres\".\"dev\".\"stg_warehouse__package_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_package_id", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_name.2b25040d44": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stock_item_name", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_stock_item_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_stock_item_name.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_name.2b25040d44", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_stock_item_name"], "alias": "not_null_stg_warehouse__stock_items_stock_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.2042763, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_stock_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stock_item_name\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere stock_item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stock_item_name", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_tax_rate.8f77ee01bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_tax_rate", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_tax_rate.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_tax_rate.8f77ee01bd", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_tax_rate"], "alias": "not_null_stg_warehouse__stock_items_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.2061732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_tax_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tax_rate\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere tax_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_price.103b0e4d0d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_unit_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_unit_price.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_price.103b0e4d0d", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_unit_price"], "alias": "not_null_stg_warehouse__stock_items_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.2078602, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_recommended_retail_price.5226987013": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "recommended_retail_price", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_recommended_retail_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_recommended_retail_price.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_recommended_retail_price.5226987013", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_recommended_retail_price"], "alias": "not_null_stg_warehouse__stock_items_recommended_retail_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.2095861, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_recommended_retail_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect recommended_retail_price\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere recommended_retail_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "recommended_retail_price", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "test.dbt_wwi.not_null_stg_warehouse__stock_items_quantity_per_outer.21df333f12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity_per_outer", "model": "{{ get_where_subquery(ref('stg_warehouse__stock_items')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_warehouse__stock_items_quantity_per_outer", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_warehouse__stock_items_quantity_per_outer.sql", "original_file_path": "models/staging/warehouse/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_warehouse__stock_items_quantity_per_outer.21df333f12", "fqn": ["dbt_wwi", "staging", "warehouse", "not_null_stg_warehouse__stock_items_quantity_per_outer"], "alias": "not_null_stg_warehouse__stock_items_quantity_per_outer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684219986.211253, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/warehouse/schema.yaml/not_null_stg_warehouse__stock_items_quantity_per_outer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity_per_outer\nfrom \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\nwhere quantity_per_outer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "quantity_per_outer", "file_key_name": "models.stg_warehouse__stock_items", "attached_node": "model.dbt_wwi.stg_warehouse__stock_items"}, "model.dbt_wwi.stg_application__countries": {"database": "postgres", "schema": "dev", "name": "stg_application__countries", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/application/stg_application__countries.sql", "original_file_path": "models/staging/application/stg_application__countries.sql", "unique_id": "model.dbt_wwi.stg_application__countries", "fqn": ["dbt_wwi", "staging", "application", "stg_application__countries"], "alias": "stg_application__countries", "checksum": {"name": "sha256", "checksum": "9ca353ee3af2f4fd6c7358bc2a875c6090253827c2f899ac84fe4a70ced7d1ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged country data from wwi application.", "columns": {"country_id": {"name": "country_id", "description": "The primary key for countries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_name": {"name": "country_name", "description": "Country name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/application/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684228908.933565, "relation_name": "\"postgres\".\"dev\".\"stg_application__countries\"", "raw_code": "with\n\nsource as (\n    \n    select * from {{ source('application', 'countries') }}\n\n),\n\ntransformed as (\n\n    select\n\n        countryid as country_id,\n        countryname as country_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["application", "countries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.application.countries"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/stg_application__countries.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n    select * from \"postgres\".\"application\".\"countries\"\n\n),\n\ntransformed as (\n\n    select\n\n        countryid as country_id,\n        countryname as country_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_application__delivery_methods": {"database": "postgres", "schema": "dev", "name": "stg_application__delivery_methods", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/application/stg_application__delivery_methods.sql", "original_file_path": "models/staging/application/stg_application__delivery_methods.sql", "unique_id": "model.dbt_wwi.stg_application__delivery_methods", "fqn": ["dbt_wwi", "staging", "application", "stg_application__delivery_methods"], "alias": "stg_application__delivery_methods", "checksum": {"name": "sha256", "checksum": "0c6651657bb1455fec09fa0ba8c083d821708f188fac41fa2cb64668d71572b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged delivery method data from wwi application.", "columns": {"delivery_method_id": {"name": "delivery_method_id", "description": "The primary key for delivery_methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_method_name": {"name": "delivery_method_name", "description": "Delivery method name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/application/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684228908.934567, "relation_name": "\"postgres\".\"dev\".\"stg_application__delivery_methods\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('application', 'deliverymethods') }}\n\n),\n\ntransformed as (\n\n    select\n\n        deliverymethodid as delivery_method_id,\n        deliverymethodname as delivery_method_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["application", "deliverymethods"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.application.deliverymethods"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/stg_application__delivery_methods.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"application\".\"deliverymethods\"\n\n),\n\ntransformed as (\n\n    select\n\n        deliverymethodid as delivery_method_id,\n        deliverymethodname as delivery_method_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_application__cities": {"database": "postgres", "schema": "dev", "name": "stg_application__cities", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/application/stg_application__cities.sql", "original_file_path": "models/staging/application/stg_application__cities.sql", "unique_id": "model.dbt_wwi.stg_application__cities", "fqn": ["dbt_wwi", "staging", "application", "stg_application__cities"], "alias": "stg_application__cities", "checksum": {"name": "sha256", "checksum": "6dbf8b8ba2e514a48418490b6bf63a1f53f39dddb68713b3f9bb2a90d64ee149"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged city data from wwi application.", "columns": {"city_id": {"name": "city_id", "description": "The primary key for cities.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_province_id": {"name": "state_province_id", "description": "The foreign key for cities and state_provinces.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city_name": {"name": "city_name", "description": "City name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/application/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684228908.9324424, "relation_name": "\"postgres\".\"dev\".\"stg_application__cities\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('application', 'cities') }}\n    \n),\n\ntransformed as (\n\n    select\n\n        cityid as city_id,\n        stateprovinceid as state_province_id,\n        cityname as city_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["application", "cities"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.application.cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/stg_application__cities.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"application\".\"cities\"\n    \n),\n\ntransformed as (\n\n    select\n\n        cityid as city_id,\n        stateprovinceid as state_province_id,\n        cityname as city_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_application__state_provinces": {"database": "postgres", "schema": "dev", "name": "stg_application__state_provinces", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/application/stg_application__state_provinces.sql", "original_file_path": "models/staging/application/stg_application__state_provinces.sql", "unique_id": "model.dbt_wwi.stg_application__state_provinces", "fqn": ["dbt_wwi", "staging", "application", "stg_application__state_provinces"], "alias": "stg_application__state_provinces", "checksum": {"name": "sha256", "checksum": "8251e08679c0ae59b079552c5970466dd3e1090b0b16824acec4e38945dfe5b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged state province from wwi application.", "columns": {"state_province_id": {"name": "state_province_id", "description": "The primary key for state_provinces.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The foreign key for state_provinces and country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_province_name": {"name": "state_province_name", "description": "State province name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/application/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684228908.940062, "relation_name": "\"postgres\".\"dev\".\"stg_application__state_provinces\"", "raw_code": "with\n\nsource as (\n\n    select * from {{ source('application', 'stateprovinces') }}\n\n),\n\ntransformed as (\n\n    select\n\n        stateprovinceid as state_province_id,\n        countryid as country_id,\n        stateprovincename as state_province_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["application", "stateprovinces"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.application.stateprovinces"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/stg_application__state_provinces.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"postgres\".\"application\".\"stateprovinces\"\n\n),\n\ntransformed as (\n\n    select\n\n        stateprovinceid as state_province_id,\n        countryid as country_id,\n        stateprovincename as state_province_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_application__person": {"database": "postgres", "schema": "dev", "name": "stg_application__person", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/application/stg_application__person.sql", "original_file_path": "models/staging/application/stg_application__person.sql", "unique_id": "model.dbt_wwi.stg_application__person", "fqn": ["dbt_wwi", "staging", "application", "stg_application__person"], "alias": "stg_application__person", "checksum": {"name": "sha256", "checksum": "0c46b4306455c7ec0029154d0100309f63bde20eeb700923aa58c354ca098773"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged person data from wwi application.", "columns": {"person_id": {"name": "person_id", "description": "The primary key for person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Person fullname.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_name": {"name": "preferred_name", "description": "Person preferred name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_name": {"name": "search_name", "description": "Person name to search in system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_system_user": {"name": "is_system_user", "description": "Whether person is user system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employee": {"name": "is_employee", "description": "Whether person is employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_sales_person": {"name": "is_sales_person", "description": "Whether person is sales employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Person phone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fax_number": {"name": "fax_number", "description": "Person fax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Person email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/application/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684228908.9387658, "relation_name": "\"postgres\".\"dev\".\"stg_application__person\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('application', 'people') }}\n\n),\n\ntransformed as (\n\n    select\n\n        personid as person_id,\n        fullname as full_name,\n        preferredname as preferred_name,\n        searchname as search_name,\n        issystemuser as is_system_user,\n        isemployee as is_employee,\n        issalesperson as is_sales_person,\n        phonenumber as phone_number,\n        faxnumber as fax_number,\n        emailaddress as email_address\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["application", "people"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.application.people"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/stg_application__person.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"application\".\"people\"\n\n),\n\ntransformed as (\n\n    select\n\n        personid as person_id,\n        fullname as full_name,\n        preferredname as preferred_name,\n        searchname as search_name,\n        issystemuser as is_system_user,\n        isemployee as is_employee,\n        issalesperson as is_sales_person,\n        phonenumber as phone_number,\n        faxnumber as fax_number,\n        emailaddress as email_address\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_stg_application__cities_city_id.fa077fdf6a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "city_id", "model": "{{ get_where_subquery(ref('stg_application__cities')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_application__cities_city_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_application__cities_city_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.unique_stg_application__cities_city_id.fa077fdf6a", "fqn": ["dbt_wwi", "staging", "application", "unique_stg_application__cities_city_id"], "alias": "unique_stg_application__cities_city_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9411511, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/unique_stg_application__cities_city_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_application__cities\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "city_id", "file_key_name": "models.stg_application__cities", "attached_node": "model.dbt_wwi.stg_application__cities"}, "test.dbt_wwi.not_null_stg_application__cities_city_id.103828a48c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city_id", "model": "{{ get_where_subquery(ref('stg_application__cities')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__cities_city_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__cities_city_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__cities_city_id.103828a48c", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__cities_city_id"], "alias": "not_null_stg_application__cities_city_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9429834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__cities_city_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"postgres\".\"dev\".\"stg_application__cities\"\nwhere city_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "city_id", "file_key_name": "models.stg_application__cities", "attached_node": "model.dbt_wwi.stg_application__cities"}, "test.dbt_wwi.not_null_stg_application__cities_state_province_id.86d0cbe053": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_province_id", "model": "{{ get_where_subquery(ref('stg_application__cities')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__cities_state_province_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__cities_state_province_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__cities_state_province_id.86d0cbe053", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__cities_state_province_id"], "alias": "not_null_stg_application__cities_state_province_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9446576, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__cities_state_province_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_province_id\nfrom \"postgres\".\"dev\".\"stg_application__cities\"\nwhere state_province_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_id", "file_key_name": "models.stg_application__cities", "attached_node": "model.dbt_wwi.stg_application__cities"}, "test.dbt_wwi.relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_.1be9d8139b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_application__state_provinces')", "field": "state_province_id", "column_name": "state_province_id", "model": "{{ get_where_subquery(ref('stg_application__cities')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_application__f2e661de560a73917129d7ddd3c580f1.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_.1be9d8139b", "fqn": ["dbt_wwi", "staging", "application", "relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_"], "alias": "relationships_stg_application__f2e661de560a73917129d7ddd3c580f1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_application__f2e661de560a73917129d7ddd3c580f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_application__f2e661de560a73917129d7ddd3c580f1"}, "created_at": 1684228908.946339, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_application__f2e661de560a73917129d7ddd3c580f1\") }}", "language": "sql", "refs": [{"name": "stg_application__state_provinces", "package": null, "version": null}, {"name": "stg_application__cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__state_provinces", "model.dbt_wwi.stg_application__cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/relationships_stg_application__f2e661de560a73917129d7ddd3c580f1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select state_province_id as from_field\n    from \"postgres\".\"dev\".\"stg_application__cities\"\n    where state_province_id is not null\n),\n\nparent as (\n    select state_province_id as to_field\n    from \"postgres\".\"dev\".\"stg_application__state_provinces\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_id", "file_key_name": "models.stg_application__cities", "attached_node": "model.dbt_wwi.stg_application__cities"}, "test.dbt_wwi.not_null_stg_application__cities_city_name.ae761a86e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city_name", "model": "{{ get_where_subquery(ref('stg_application__cities')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__cities_city_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__cities_city_name.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__cities_city_name.ae761a86e4", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__cities_city_name"], "alias": "not_null_stg_application__cities_city_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.950484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__cities_city_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_name\nfrom \"postgres\".\"dev\".\"stg_application__cities\"\nwhere city_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "city_name", "file_key_name": "models.stg_application__cities", "attached_node": "model.dbt_wwi.stg_application__cities"}, "test.dbt_wwi.unique_stg_application__countries_country_id.f063f93b91": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('stg_application__countries')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_application__countries_country_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_application__countries_country_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.unique_stg_application__countries_country_id.f063f93b91", "fqn": ["dbt_wwi", "staging", "application", "unique_stg_application__countries_country_id"], "alias": "unique_stg_application__countries_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9521906, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__countries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__countries"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/unique_stg_application__countries_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_application__countries\"\nwhere country_id is not null\ngroup by country_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_id", "file_key_name": "models.stg_application__countries", "attached_node": "model.dbt_wwi.stg_application__countries"}, "test.dbt_wwi.not_null_stg_application__countries_country_id.b771a78461": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('stg_application__countries')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__countries_country_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__countries_country_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__countries_country_id.b771a78461", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__countries_country_id"], "alias": "not_null_stg_application__countries_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9538789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__countries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__countries"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__countries_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_id\nfrom \"postgres\".\"dev\".\"stg_application__countries\"\nwhere country_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_id", "file_key_name": "models.stg_application__countries", "attached_node": "model.dbt_wwi.stg_application__countries"}, "test.dbt_wwi.not_null_stg_application__countries_country_name.4ba58a9e38": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_name", "model": "{{ get_where_subquery(ref('stg_application__countries')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__countries_country_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__countries_country_name.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__countries_country_name.4ba58a9e38", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__countries_country_name"], "alias": "not_null_stg_application__countries_country_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9557014, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__countries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__countries"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__countries_country_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_name\nfrom \"postgres\".\"dev\".\"stg_application__countries\"\nwhere country_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_name", "file_key_name": "models.stg_application__countries", "attached_node": "model.dbt_wwi.stg_application__countries"}, "test.dbt_wwi.unique_stg_application__delivery_methods_delivery_method_id.74a5fe1981": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "delivery_method_id", "model": "{{ get_where_subquery(ref('stg_application__delivery_methods')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_application__delivery_methods_delivery_method_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_application__delivery_methods_delivery_method_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.unique_stg_application__delivery_methods_delivery_method_id.74a5fe1981", "fqn": ["dbt_wwi", "staging", "application", "unique_stg_application__delivery_methods_delivery_method_id"], "alias": "unique_stg_application__delivery_methods_delivery_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9573948, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__delivery_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__delivery_methods"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/unique_stg_application__delivery_methods_delivery_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    delivery_method_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_application__delivery_methods\"\nwhere delivery_method_id is not null\ngroup by delivery_method_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_id", "file_key_name": "models.stg_application__delivery_methods", "attached_node": "model.dbt_wwi.stg_application__delivery_methods"}, "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_id.b5f7f50b3f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_method_id", "model": "{{ get_where_subquery(ref('stg_application__delivery_methods')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__delivery_methods_delivery_method_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__delivery_methods_delivery_method_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_id.b5f7f50b3f", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__delivery_methods_delivery_method_id"], "alias": "not_null_stg_application__delivery_methods_delivery_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9590576, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__delivery_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__delivery_methods"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__delivery_methods_delivery_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_method_id\nfrom \"postgres\".\"dev\".\"stg_application__delivery_methods\"\nwhere delivery_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_id", "file_key_name": "models.stg_application__delivery_methods", "attached_node": "model.dbt_wwi.stg_application__delivery_methods"}, "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_name.50eefc71a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_method_name", "model": "{{ get_where_subquery(ref('stg_application__delivery_methods')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__delivery_methods_delivery_method_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__delivery_methods_delivery_method_name.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_name.50eefc71a7", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__delivery_methods_delivery_method_name"], "alias": "not_null_stg_application__delivery_methods_delivery_method_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9607046, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__delivery_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__delivery_methods"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__delivery_methods_delivery_method_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_method_name\nfrom \"postgres\".\"dev\".\"stg_application__delivery_methods\"\nwhere delivery_method_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_name", "file_key_name": "models.stg_application__delivery_methods", "attached_node": "model.dbt_wwi.stg_application__delivery_methods"}, "test.dbt_wwi.unique_stg_application__person_person_id.cd16cab35f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('stg_application__person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_application__person_person_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_application__person_person_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.unique_stg_application__person_person_id.cd16cab35f", "fqn": ["dbt_wwi", "staging", "application", "unique_stg_application__person_person_id"], "alias": "unique_stg_application__person_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9625201, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__person"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/unique_stg_application__person_person_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_application__person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.stg_application__person", "attached_node": "model.dbt_wwi.stg_application__person"}, "test.dbt_wwi.not_null_stg_application__person_person_id.9aeb92ab77": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('stg_application__person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__person_person_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__person_person_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__person_person_id.9aeb92ab77", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__person_person_id"], "alias": "not_null_stg_application__person_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.964169, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__person"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__person_person_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom \"postgres\".\"dev\".\"stg_application__person\"\nwhere person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.stg_application__person", "attached_node": "model.dbt_wwi.stg_application__person"}, "test.dbt_wwi.not_null_stg_application__person_full_name.bca1f0749c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "full_name", "model": "{{ get_where_subquery(ref('stg_application__person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__person_full_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__person_full_name.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__person_full_name.bca1f0749c", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__person_full_name"], "alias": "not_null_stg_application__person_full_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9658377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__person"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__person_full_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect full_name\nfrom \"postgres\".\"dev\".\"stg_application__person\"\nwhere full_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "full_name", "file_key_name": "models.stg_application__person", "attached_node": "model.dbt_wwi.stg_application__person"}, "test.dbt_wwi.unique_stg_application__state_provinces_state_province_id.9289bd8819": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "state_province_id", "model": "{{ get_where_subquery(ref('stg_application__state_provinces')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_application__state_provinces_state_province_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_application__state_provinces_state_province_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.unique_stg_application__state_provinces_state_province_id.9289bd8819", "fqn": ["dbt_wwi", "staging", "application", "unique_stg_application__state_provinces_state_province_id"], "alias": "unique_stg_application__state_provinces_state_province_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9677246, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__state_provinces", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__state_provinces"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/unique_stg_application__state_provinces_state_province_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    state_province_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_application__state_provinces\"\nwhere state_province_id is not null\ngroup by state_province_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_id", "file_key_name": "models.stg_application__state_provinces", "attached_node": "model.dbt_wwi.stg_application__state_provinces"}, "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_id.e51f33a36b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_province_id", "model": "{{ get_where_subquery(ref('stg_application__state_provinces')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__state_provinces_state_province_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__state_provinces_state_province_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_id.e51f33a36b", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__state_provinces_state_province_id"], "alias": "not_null_stg_application__state_provinces_state_province_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9693923, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__state_provinces", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__state_provinces"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__state_provinces_state_province_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_province_id\nfrom \"postgres\".\"dev\".\"stg_application__state_provinces\"\nwhere state_province_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_id", "file_key_name": "models.stg_application__state_provinces", "attached_node": "model.dbt_wwi.stg_application__state_provinces"}, "test.dbt_wwi.not_null_stg_application__state_provinces_country_id.7670c41b38": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('stg_application__state_provinces')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__state_provinces_country_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__state_provinces_country_id.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__state_provinces_country_id.7670c41b38", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__state_provinces_country_id"], "alias": "not_null_stg_application__state_provinces_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9710805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__state_provinces", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__state_provinces"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__state_provinces_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_id\nfrom \"postgres\".\"dev\".\"stg_application__state_provinces\"\nwhere country_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_id", "file_key_name": "models.stg_application__state_provinces", "attached_node": "model.dbt_wwi.stg_application__state_provinces"}, "test.dbt_wwi.relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_.6384db998c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_application__countries')", "field": "country_id", "column_name": "country_id", "model": "{{ get_where_subquery(ref('stg_application__state_provinces')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_application__59adf4589f121dee33131507da122618.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_.6384db998c", "fqn": ["dbt_wwi", "staging", "application", "relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_"], "alias": "relationships_stg_application__59adf4589f121dee33131507da122618", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_application__59adf4589f121dee33131507da122618", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_application__59adf4589f121dee33131507da122618"}, "created_at": 1684228908.9727492, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_application__59adf4589f121dee33131507da122618\") }}", "language": "sql", "refs": [{"name": "stg_application__countries", "package": null, "version": null}, {"name": "stg_application__state_provinces", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__countries", "model.dbt_wwi.stg_application__state_provinces"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/relationships_stg_application__59adf4589f121dee33131507da122618.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select country_id as from_field\n    from \"postgres\".\"dev\".\"stg_application__state_provinces\"\n    where country_id is not null\n),\n\nparent as (\n    select country_id as to_field\n    from \"postgres\".\"dev\".\"stg_application__countries\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_id", "file_key_name": "models.stg_application__state_provinces", "attached_node": "model.dbt_wwi.stg_application__state_provinces"}, "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_name.988e0433bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_province_name", "model": "{{ get_where_subquery(ref('stg_application__state_provinces')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_application__state_provinces_state_province_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_application__state_provinces_state_province_name.sql", "original_file_path": "models/staging/application/schema.yml", "unique_id": "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_name.988e0433bd", "fqn": ["dbt_wwi", "staging", "application", "not_null_stg_application__state_provinces_state_province_name"], "alias": "not_null_stg_application__state_provinces_state_province_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228908.9768262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_application__state_provinces", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__state_provinces"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/application/schema.yml/not_null_stg_application__state_provinces_state_province_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_province_name\nfrom \"postgres\".\"dev\".\"stg_application__state_provinces\"\nwhere state_province_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_name", "file_key_name": "models.stg_application__state_provinces", "attached_node": "model.dbt_wwi.stg_application__state_provinces"}, "model.dbt_wwi.dim_customer": {"database": "postgres", "schema": "dev", "name": "dim_customer", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/core/dim_customer.sql", "original_file_path": "models/marts/core/dim_customer.sql", "unique_id": "model.dbt_wwi.dim_customer", "fqn": ["dbt_wwi", "marts", "core", "dim_customer"], "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "0c73f44f92d5e0530e6b3a162532b9d0cf6b46620683e399b0d2e17a7475828f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Customer dimension data cleaned from staging.", "columns": {"customer_key": {"name": "customer_key", "description": "The primary key for dim_customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_category_name": {"name": "customer_category_name", "description": "Customer category name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buying_group_name": {"name": "buying_group_name", "description": "Buying group name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "open_date_key": {"name": "open_date_key", "description": "Open date account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Customer phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fax_number": {"name": "fax_number", "description": "Customer fax number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "website_url": {"name": "website_url", "description": "Customer website.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_city": {"name": "delivery_city", "description": "Customer delivery city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_state_province": {"name": "delivery_state_province", "description": "Customer delivery province.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_country": {"name": "delivery_country", "description": "Customer delivery country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/core/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745564.1183085, "relation_name": "\"postgres\".\"dev\".\"dim_customer\"", "raw_code": "with\n\ncustomers as (\n\n    select * from {{ ref('stg_sales__customers') }}\n\n),\n\ncustomer_categories as (\n\n    select * from {{ ref('stg_sales__customer_categories') }}\n\n),\n\nbuying_groups as (\n\n    select * from {{ ref('stg_sales__buying_groups') }}\n\n),\n\nlocation as (\n\n    select * from {{ ref('location') }}\n\n),\n\nfinal as (\n\n    select\n\n        cast(ctm.customer_id as int) as customer_key,\n        ctm.customer_name,\n        cc.customer_category_name,\n        coalesce(bg.buying_group_name, 'unknown') as buying_group_name,\n        {{ convert_date_id('account_opened_date') }} as open_date_key,\n        ctm.phone_number,\n        ctm.fax_number,\n        ctm.website_url,\n        lct.city_name as delivery_city,\n        lct.state_province_name as delivery_state_province,\n        lct.country_name as delivery_country\n\n    from customers as ctm\n    left join customer_categories as cc using (customer_category_id)\n    left join buying_groups as bg using (buying_group_id)\n    left join location as lct on ctm.delivery_city_id = lct.city_id\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}, {"name": "stg_sales__customer_categories", "package": null, "version": null}, {"name": "stg_sales__buying_groups", "package": null, "version": null}, {"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_wwi.convert_date_id"], "nodes": ["model.dbt_wwi.stg_sales__customers", "model.dbt_wwi.stg_sales__customer_categories", "model.dbt_wwi.stg_sales__buying_groups", "model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/dim_customer.sql", "compiled": true, "compiled_code": "with\n\ncustomers as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__customers\"\n\n),\n\ncustomer_categories as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__customer_categories\"\n\n),\n\nbuying_groups as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__buying_groups\"\n\n),\n\nlocation as (\n\n    select * from \"postgres\".\"dev\".\"location\"\n\n),\n\nfinal as (\n\n    select\n\n        cast(ctm.customer_id as int) as customer_key,\n        ctm.customer_name,\n        cc.customer_category_name,\n        coalesce(bg.buying_group_name, 'unknown') as buying_group_name,\n        cast(\n            cast(extract(year from account_opened_date) as text) || \n            cast(extract(month from account_opened_date) as text) || \n            cast(extract(day from account_opened_date) as text)\n        as int) as open_date_key,\n        ctm.phone_number,\n        ctm.fax_number,\n        ctm.website_url,\n        lct.city_name as delivery_city,\n        lct.state_province_name as delivery_state_province,\n        lct.country_name as delivery_country\n\n    from customers as ctm\n    left join customer_categories as cc using (customer_category_id)\n    left join buying_groups as bg using (buying_group_id)\n    left join location as lct on ctm.delivery_city_id = lct.city_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.dim_delivery_method": {"database": "postgres", "schema": "dev", "name": "dim_delivery_method", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/core/dim_delivery_method.sql", "original_file_path": "models/marts/core/dim_delivery_method.sql", "unique_id": "model.dbt_wwi.dim_delivery_method", "fqn": ["dbt_wwi", "marts", "core", "dim_delivery_method"], "alias": "dim_delivery_method", "checksum": {"name": "sha256", "checksum": "c2dd86c515545243eeb6adf779516a7da3ba5e628a55d8539f40901a5bf04d24"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Delivery method dimension data cleaned from staging.", "columns": {"delivery_method_key": {"name": "delivery_method_key", "description": "The primary key for dim_delivery_method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_method_name": {"name": "delivery_method_name", "description": "Delivery method name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/core/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745564.119398, "relation_name": "\"postgres\".\"dev\".\"dim_delivery_method\"", "raw_code": "with \n\ndelivery_methods as (\n\n    select * from {{ ref('stg_application__delivery_methods') }}\n\n),\n\nfinal as (\n\n    select\n\n        delivery_method_id as delivery_method_key,\n        delivery_method_name\n\n    from delivery_methods\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_application__delivery_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_wwi.stg_application__delivery_methods"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/dim_delivery_method.sql", "compiled": true, "compiled_code": "with \n\ndelivery_methods as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__delivery_methods\"\n\n),\n\nfinal as (\n\n    select\n\n        delivery_method_id as delivery_method_key,\n        delivery_method_name\n\n    from delivery_methods\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.dim_product": {"database": "postgres", "schema": "dev", "name": "dim_product", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/core/dim_product.sql", "original_file_path": "models/marts/core/dim_product.sql", "unique_id": "model.dbt_wwi.dim_product", "fqn": ["dbt_wwi", "marts", "core", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "d00074cedc90ea26f6256eaf8461ba15bd0e88447d5ada14e2e5b67fe014a25c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Product dimension data cleaned from staging.", "columns": {"product_key": {"name": "product_key", "description": "The primary key for dim_product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "Product name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "Supplier name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "color_name": {"name": "color_name", "description": "Color name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_type_name": {"name": "package_type_name", "description": "Package type name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Brand.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "size": {"name": "size", "description": "Size.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "barcode": {"name": "barcode", "description": "Barcode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "Tax rate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recommended_retail_price": {"name": "recommended_retail_price", "description": "Recommended retail price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "typical_weight_per_unit": {"name": "typical_weight_per_unit", "description": "Typical weight per unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity_per_outer": {"name": "quantity_per_outer", "description": "Quantity per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "Manufacturer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/core/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745564.123942, "relation_name": "\"postgres\".\"dev\".\"dim_product\"", "raw_code": "with \n\nstock_items as (\n\n    select * from {{ ref('stg_warehouse__stock_items') }}\n\n),\n\npackage_types as (\n\n    select * from {{ ref('stg_warehouse__package_types') }}\n\n),\n\ncolors as (\n\n    select * from {{ ref('stg_warehouse__colors') }}\n\n),\n\nsuppliers as (\n\n    select * from {{ ref('stg_purchasing__suppliers') }}\n\n),\n\nfinal as (\n\n    select\n\n        si.stock_item_id as product_key,\n        si.stock_item_name as product_name,\n        sp.supplier_name,\n        cl.color_name,\n        pt.package_type_name,\n        coalesce(si.brand, 'unknown') as brand,\n        coalesce(si.size, 'unknown') as size,\n        coalesce(si.barcode, 'unknown') as barcode,\n\n        cast(si.tax_rate as float) as tax_rate,\n        cast(si.unit_price as float) as unit_price,\n        cast(si.recommended_retail_price as float) as recommended_retail_price,\n        cast(si.typical_weight_per_unit as float) as typical_weight_per_unit,\n        cast(si.quantity_per_outer as int) as quantity_per_outer,\n\n        coalesce(custom_fields ->> 'CountryOfManufacture', 'unknown') as manufacturer,\n        case\n            when custom_fields ->> 'Tags' is not null\n                then \n                    array_to_string(\n                        string_to_array(substring(custom_fields ->> 'Tags', '\"([^\"]+)\"'), ', '),\n                        ','\n                    )\n        end as tags\n\n    from stock_items as si\n    join suppliers as sp using (supplier_id)\n    join colors as cl using (color_id)\n    join package_types as pt \n        on si.unit_package_id = pt.package_type_id\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}, {"name": "stg_warehouse__package_types", "package": null, "version": null}, {"name": "stg_warehouse__colors", "package": null, "version": null}, {"name": "stg_purchasing__suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items", "model.dbt_wwi.stg_warehouse__package_types", "model.dbt_wwi.stg_warehouse__colors", "model.dbt_wwi.stg_purchasing__suppliers"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/dim_product.sql", "compiled": true, "compiled_code": "with \n\nstock_items as (\n\n    select * from \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\n\n),\n\npackage_types as (\n\n    select * from \"postgres\".\"dev\".\"stg_warehouse__package_types\"\n\n),\n\ncolors as (\n\n    select * from \"postgres\".\"dev\".\"stg_warehouse__colors\"\n\n),\n\nsuppliers as (\n\n    select * from \"postgres\".\"dev\".\"stg_purchasing__suppliers\"\n\n),\n\nfinal as (\n\n    select\n\n        si.stock_item_id as product_key,\n        si.stock_item_name as product_name,\n        sp.supplier_name,\n        cl.color_name,\n        pt.package_type_name,\n        coalesce(si.brand, 'unknown') as brand,\n        coalesce(si.size, 'unknown') as size,\n        coalesce(si.barcode, 'unknown') as barcode,\n\n        cast(si.tax_rate as float) as tax_rate,\n        cast(si.unit_price as float) as unit_price,\n        cast(si.recommended_retail_price as float) as recommended_retail_price,\n        cast(si.typical_weight_per_unit as float) as typical_weight_per_unit,\n        cast(si.quantity_per_outer as int) as quantity_per_outer,\n\n        coalesce(custom_fields ->> 'CountryOfManufacture', 'unknown') as manufacturer,\n        case\n            when custom_fields ->> 'Tags' is not null\n                then \n                    array_to_string(\n                        string_to_array(substring(custom_fields ->> 'Tags', '\"([^\"]+)\"'), ', '),\n                        ','\n                    )\n        end as tags\n\n    from stock_items as si\n    join suppliers as sp using (supplier_id)\n    join colors as cl using (color_id)\n    join package_types as pt \n        on si.unit_package_id = pt.package_type_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.dim_promotion": {"database": "postgres", "schema": "dev", "name": "dim_promotion", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/core/dim_promotion.sql", "original_file_path": "models/marts/core/dim_promotion.sql", "unique_id": "model.dbt_wwi.dim_promotion", "fqn": ["dbt_wwi", "marts", "core", "dim_promotion"], "alias": "dim_promotion", "checksum": {"name": "sha256", "checksum": "4aae29359be1b5388923767613cdd4b032a90b4bfa27bf1f0c048c68e97fddf1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Promotion dimension data cleaned from staging.", "columns": {"promotion_key": {"name": "promotion_key", "description": "The primary key for dim_promotion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "promotion_description": {"name": "promotion_description", "description": "Description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Event started date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "Event ended date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "Discount price amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "Discount price percentage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/core/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745564.1259575, "relation_name": "\"postgres\".\"dev\".\"dim_promotion\"", "raw_code": "with \n\npromotion as (\n\n    select * from {{ ref('stg_sales__promotion') }}\n\n),\n\nfinal as (\n\n    select\n\n        special_deal_id as promotion_key,\n        deal_description as promotion_description,\n        start_date,\n        end_date,\n        cast(discount_amount as float) as discount_amount,\n        cast(discount_percentage as float) as discount_percentage\n\n    from promotion\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/dim_promotion.sql", "compiled": true, "compiled_code": "with \n\npromotion as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__promotion\"\n\n),\n\nfinal as (\n\n    select\n\n        special_deal_id as promotion_key,\n        deal_description as promotion_description,\n        start_date,\n        end_date,\n        cast(discount_amount as float) as discount_amount,\n        cast(discount_percentage as float) as discount_percentage\n\n    from promotion\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.dim_sales_person": {"database": "postgres", "schema": "dev", "name": "dim_sales_person", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/core/dim_sales_person.sql", "original_file_path": "models/marts/core/dim_sales_person.sql", "unique_id": "model.dbt_wwi.dim_sales_person", "fqn": ["dbt_wwi", "marts", "core", "dim_sales_person"], "alias": "dim_sales_person", "checksum": {"name": "sha256", "checksum": "55d1ae22343cce46c1bbf79430ace3e4809ba6359d276f7bf8a010c4771fc6cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Sales person dimension data cleaned from staging.", "columns": {"sales_person_key": {"name": "sales_person_key", "description": "The primary key for dime_sales_person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Fullname.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_name": {"name": "preferred_name", "description": "Preferred name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_name": {"name": "search_name", "description": "Search name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_system_user": {"name": "is_system_user", "description": "Whether person is user system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employee": {"name": "is_employee", "description": "Whether person is employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fax_number": {"name": "fax_number", "description": "Fax number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/core/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745564.1343503, "relation_name": "\"postgres\".\"dev\".\"dim_sales_person\"", "raw_code": "with \n\npersons as (\n\n    select * from {{ ref('stg_application__person') }}\n    where is_sales_person = true\n),\n\nfinal as (\n\n    select\n\n        cast(person_id as int) as sales_person_key,\n        full_name,\n        preferred_name,\n        search_name,\n        cast(is_system_user as boolean) as is_system_user,\n        cast(is_employee as boolean) as is_employee,\n        coalesce(phone_number, 'unknown') as phone_number,\n        coalesce(fax_number, 'unknown') as fax_number,\n        coalesce(email_address, 'unknown') as email_address\n    \n    from persons\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_application__person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_wwi.stg_application__person"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/dim_sales_person.sql", "compiled": true, "compiled_code": "with \n\npersons as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__person\"\n    where is_sales_person = true\n),\n\nfinal as (\n\n    select\n\n        cast(person_id as int) as sales_person_key,\n        full_name,\n        preferred_name,\n        search_name,\n        cast(is_system_user as boolean) as is_system_user,\n        cast(is_employee as boolean) as is_employee,\n        coalesce(phone_number, 'unknown') as phone_number,\n        coalesce(fax_number, 'unknown') as fax_number,\n        coalesce(email_address, 'unknown') as email_address\n    \n    from persons\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_dim_customer_customer_key.7b0683cc6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dim_customer_customer_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dim_customer_customer_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dim_customer_customer_key.7b0683cc6e", "fqn": ["dbt_wwi", "marts", "core", "unique_dim_customer_customer_key"], "alias": "unique_dim_customer_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1439936, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_customer"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/unique_dim_customer_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"dim_customer\"\nwhere customer_key is not null\ngroup by customer_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customer", "attached_node": "model.dbt_wwi.dim_customer"}, "test.dbt_wwi.not_null_dim_customer_customer_key.c289fe4d1f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_customer_customer_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_customer_customer_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_customer_customer_key.c289fe4d1f", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_customer_customer_key"], "alias": "not_null_dim_customer_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.145874, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_customer"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_customer_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"postgres\".\"dev\".\"dim_customer\"\nwhere customer_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customer", "attached_node": "model.dbt_wwi.dim_customer"}, "test.dbt_wwi.not_null_dim_customer_customer_name.a25ec89461": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_customer_customer_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_customer_customer_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_customer_customer_name.a25ec89461", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_customer_customer_name"], "alias": "not_null_dim_customer_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1478436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_customer"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_customer_customer_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom \"postgres\".\"dev\".\"dim_customer\"\nwhere customer_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.dim_customer", "attached_node": "model.dbt_wwi.dim_customer"}, "test.dbt_wwi.not_null_dim_customer_open_date_key.3284579e78": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "open_date_key", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_customer_open_date_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_customer_open_date_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_customer_open_date_key.3284579e78", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_customer_open_date_key"], "alias": "not_null_dim_customer_open_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1497033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_customer"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_customer_open_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect open_date_key\nfrom \"postgres\".\"dev\".\"dim_customer\"\nwhere open_date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "open_date_key", "file_key_name": "models.dim_customer", "attached_node": "model.dbt_wwi.dim_customer"}, "test.dbt_wwi.unique_dim_delivery_method_delivery_method_key.a13fd01d4f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "delivery_method_key", "model": "{{ get_where_subquery(ref('dim_delivery_method')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dim_delivery_method_delivery_method_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dim_delivery_method_delivery_method_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dim_delivery_method_delivery_method_key.a13fd01d4f", "fqn": ["dbt_wwi", "marts", "core", "unique_dim_delivery_method_delivery_method_key"], "alias": "unique_dim_delivery_method_delivery_method_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1514988, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_delivery_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_delivery_method"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/unique_dim_delivery_method_delivery_method_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    delivery_method_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"dim_delivery_method\"\nwhere delivery_method_key is not null\ngroup by delivery_method_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_key", "file_key_name": "models.dim_delivery_method", "attached_node": "model.dbt_wwi.dim_delivery_method"}, "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_key.40189ae2cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_method_key", "model": "{{ get_where_subquery(ref('dim_delivery_method')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_delivery_method_delivery_method_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_delivery_method_delivery_method_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_key.40189ae2cb", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_delivery_method_delivery_method_key"], "alias": "not_null_dim_delivery_method_delivery_method_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.153189, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_delivery_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_delivery_method"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_delivery_method_delivery_method_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_method_key\nfrom \"postgres\".\"dev\".\"dim_delivery_method\"\nwhere delivery_method_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_key", "file_key_name": "models.dim_delivery_method", "attached_node": "model.dbt_wwi.dim_delivery_method"}, "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_name.5a4d86a0b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_method_name", "model": "{{ get_where_subquery(ref('dim_delivery_method')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_delivery_method_delivery_method_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_delivery_method_delivery_method_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_name.5a4d86a0b9", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_delivery_method_delivery_method_name"], "alias": "not_null_dim_delivery_method_delivery_method_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1548858, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_delivery_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_delivery_method"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_delivery_method_delivery_method_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_method_name\nfrom \"postgres\".\"dev\".\"dim_delivery_method\"\nwhere delivery_method_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_name", "file_key_name": "models.dim_delivery_method", "attached_node": "model.dbt_wwi.dim_delivery_method"}, "test.dbt_wwi.unique_dim_product_product_key.1753236bd0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dim_product_product_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dim_product_product_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dim_product_product_key.1753236bd0", "fqn": ["dbt_wwi", "marts", "core", "unique_dim_product_product_key"], "alias": "unique_dim_product_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1567676, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/unique_dim_product_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere product_key is not null\ngroup by product_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_product_key.f0e1d838d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_product_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_product_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_product_key.f0e1d838d3", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_product_key"], "alias": "not_null_dim_product_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1584394, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_product_name.1b672622d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_product_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_product_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_product_name.1b672622d5", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_product_name"], "alias": "not_null_dim_product_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1601045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_supplier_name.563b46e4f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_name", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_supplier_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_supplier_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_supplier_name.563b46e4f8", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_supplier_name"], "alias": "not_null_dim_product_supplier_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.162611, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_supplier_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supplier_name\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere supplier_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_name", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_color_name.ece801e98d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "color_name", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_color_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_color_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_color_name.ece801e98d", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_color_name"], "alias": "not_null_dim_product_color_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.164454, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_color_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect color_name\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere color_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "color_name", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_package_type_name.20c3a8f914": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "package_type_name", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_package_type_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_package_type_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_package_type_name.20c3a8f914", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_package_type_name"], "alias": "not_null_dim_product_package_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1661296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_package_type_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect package_type_name\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere package_type_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "package_type_name", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_tax_rate.60e1ee82d7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_tax_rate", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_tax_rate.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_tax_rate.60e1ee82d7", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_tax_rate"], "alias": "not_null_dim_product_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1679194, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_tax_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tax_rate\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere tax_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_unit_price.5870bf9926": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_unit_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_unit_price.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_unit_price.5870bf9926", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_unit_price"], "alias": "not_null_dim_product_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1697204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_recommended_retail_price.b902191698": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "recommended_retail_price", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_recommended_retail_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_recommended_retail_price.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_recommended_retail_price.b902191698", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_recommended_retail_price"], "alias": "not_null_dim_product_recommended_retail_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.171459, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_recommended_retail_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect recommended_retail_price\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere recommended_retail_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "recommended_retail_price", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.not_null_dim_product_manufacturer.c9b44c9aaa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "manufacturer", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_manufacturer", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_product_manufacturer.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_product_manufacturer.c9b44c9aaa", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_product_manufacturer"], "alias": "not_null_dim_product_manufacturer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1731303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_product"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_product_manufacturer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manufacturer\nfrom \"postgres\".\"dev\".\"dim_product\"\nwhere manufacturer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "manufacturer", "file_key_name": "models.dim_product", "attached_node": "model.dbt_wwi.dim_product"}, "test.dbt_wwi.unique_dim_promotion_promotion_key.6ffd828ac6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "promotion_key", "model": "{{ get_where_subquery(ref('dim_promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dim_promotion_promotion_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dim_promotion_promotion_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dim_promotion_promotion_key.6ffd828ac6", "fqn": ["dbt_wwi", "marts", "core", "unique_dim_promotion_promotion_key"], "alias": "unique_dim_promotion_promotion_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1747844, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/unique_dim_promotion_promotion_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    promotion_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"dim_promotion\"\nwhere promotion_key is not null\ngroup by promotion_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "promotion_key", "file_key_name": "models.dim_promotion", "attached_node": "model.dbt_wwi.dim_promotion"}, "test.dbt_wwi.not_null_dim_promotion_promotion_key.386ef2d6d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "promotion_key", "model": "{{ get_where_subquery(ref('dim_promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_promotion_promotion_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_promotion_promotion_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_promotion_promotion_key.386ef2d6d5", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_promotion_promotion_key"], "alias": "not_null_dim_promotion_promotion_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.1766105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_promotion_promotion_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect promotion_key\nfrom \"postgres\".\"dev\".\"dim_promotion\"\nwhere promotion_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "promotion_key", "file_key_name": "models.dim_promotion", "attached_node": "model.dbt_wwi.dim_promotion"}, "test.dbt_wwi.not_null_dim_promotion_start_date.c1f23c7ce1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('dim_promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_promotion_start_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_promotion_start_date.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_promotion_start_date.c1f23c7ce1", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_promotion_start_date"], "alias": "not_null_dim_promotion_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.178262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_promotion_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_date\nfrom \"postgres\".\"dev\".\"dim_promotion\"\nwhere start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "start_date", "file_key_name": "models.dim_promotion", "attached_node": "model.dbt_wwi.dim_promotion"}, "test.dbt_wwi.not_null_dim_promotion_end_date.52616a8a68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date", "model": "{{ get_where_subquery(ref('dim_promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_promotion_end_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_promotion_end_date.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_promotion_end_date.52616a8a68", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_promotion_end_date"], "alias": "not_null_dim_promotion_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.180058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_promotion_end_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_date\nfrom \"postgres\".\"dev\".\"dim_promotion\"\nwhere end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "end_date", "file_key_name": "models.dim_promotion", "attached_node": "model.dbt_wwi.dim_promotion"}, "test.dbt_wwi.unique_dim_sales_person_sales_person_key.f6979a9cdd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sales_person_key", "model": "{{ get_where_subquery(ref('dim_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dim_sales_person_sales_person_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dim_sales_person_sales_person_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dim_sales_person_sales_person_key.f6979a9cdd", "fqn": ["dbt_wwi", "marts", "core", "unique_dim_sales_person_sales_person_key"], "alias": "unique_dim_sales_person_sales_person_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.2051523, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_sales_person"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/unique_dim_sales_person_sales_person_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sales_person_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"dim_sales_person\"\nwhere sales_person_key is not null\ngroup by sales_person_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_key", "file_key_name": "models.dim_sales_person", "attached_node": "model.dbt_wwi.dim_sales_person"}, "test.dbt_wwi.not_null_dim_sales_person_sales_person_key.8815020c17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_person_key", "model": "{{ get_where_subquery(ref('dim_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_sales_person_sales_person_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_sales_person_sales_person_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_sales_person_sales_person_key.8815020c17", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_sales_person_sales_person_key"], "alias": "not_null_dim_sales_person_sales_person_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.2068207, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_sales_person"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_sales_person_sales_person_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_person_key\nfrom \"postgres\".\"dev\".\"dim_sales_person\"\nwhere sales_person_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_key", "file_key_name": "models.dim_sales_person", "attached_node": "model.dbt_wwi.dim_sales_person"}, "test.dbt_wwi.not_null_dim_sales_person_full_name.500a965d8a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "full_name", "model": "{{ get_where_subquery(ref('dim_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_sales_person_full_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_sales_person_full_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_sales_person_full_name.500a965d8a", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_sales_person_full_name"], "alias": "not_null_dim_sales_person_full_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745564.2086296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_sales_person"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_dim_sales_person_full_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect full_name\nfrom \"postgres\".\"dev\".\"dim_sales_person\"\nwhere full_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "full_name", "file_key_name": "models.dim_sales_person", "attached_node": "model.dbt_wwi.dim_sales_person"}, "model.dbt_wwi.location": {"database": "postgres", "schema": "dev", "name": "location", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/intermediate/location.sql", "original_file_path": "models/marts/intermediate/location.sql", "unique_id": "model.dbt_wwi.location", "fqn": ["dbt_wwi", "marts", "intermediate", "location"], "alias": "location", "checksum": {"name": "sha256", "checksum": "4cdd2529d50921aa426bb85d46e56987858dfd551448f859b00127c0e67c1d1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "All location data from staging.", "columns": {"city_id": {"name": "city_id", "description": "The primary key for location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_province_id": {"name": "state_province_id", "description": "The primary key for location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The primary key for location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city_name": {"name": "city_name", "description": "City name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_province_name": {"name": "state_province_name", "description": "State province name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_name": {"name": "country_name", "description": "Country name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/intermediate/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745586.5510042, "relation_name": "\"postgres\".\"dev\".\"location\"", "raw_code": "with \n\ncountries as (\n\n    select * from {{ ref('stg_application__countries') }}\n\n),\n\nstate_provinces as (\n\n    select * from {{ ref('stg_application__state_provinces') }}\n\n),\n\ncites as (\n\n    select * from {{ ref('stg_application__cities') }}\n\n),\n\nlocation as (\n\n    select\n\n        c.city_id,\n        sp.state_province_id,\n        ct.country_id,\n        c.city_name,\n        sp.state_province_name,\n        ct.country_name\n\n    from countries as ct\n    join state_provinces as sp using (country_id)\n    join cites as c using (state_province_id)\n\n)\n\nselect * from location", "language": "sql", "refs": [{"name": "stg_application__countries", "package": null, "version": null}, {"name": "stg_application__state_provinces", "package": null, "version": null}, {"name": "stg_application__cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_wwi.stg_application__countries", "model.dbt_wwi.stg_application__state_provinces", "model.dbt_wwi.stg_application__cities"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/location.sql", "compiled": true, "compiled_code": "with \n\ncountries as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__countries\"\n\n),\n\nstate_provinces as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__state_provinces\"\n\n),\n\ncites as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__cities\"\n\n),\n\nlocation as (\n\n    select\n\n        c.city_id,\n        sp.state_province_id,\n        ct.country_id,\n        c.city_name,\n        sp.state_province_name,\n        ct.country_name\n\n    from countries as ct\n    join state_provinces as sp using (country_id)\n    join cites as c using (state_province_id)\n\n)\n\nselect * from location", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_location_city_id.2fa1a73b73": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "city_id", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_location_city_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_location_city_id.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.unique_location_city_id.2fa1a73b73", "fqn": ["dbt_wwi", "marts", "intermediate", "unique_location_city_id"], "alias": "unique_location_city_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.552166, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/unique_location_city_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"location\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "city_id", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "test.dbt_wwi.not_null_location_city_id.e1ed76ae1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city_id", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_location_city_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_location_city_id.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.not_null_location_city_id.e1ed76ae1a", "fqn": ["dbt_wwi", "marts", "intermediate", "not_null_location_city_id"], "alias": "not_null_location_city_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.5540442, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/not_null_location_city_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"postgres\".\"dev\".\"location\"\nwhere city_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "city_id", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "test.dbt_wwi.not_null_location_state_province_id.1697d69162": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_province_id", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_location_state_province_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_location_state_province_id.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.not_null_location_state_province_id.1697d69162", "fqn": ["dbt_wwi", "marts", "intermediate", "not_null_location_state_province_id"], "alias": "not_null_location_state_province_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.5556986, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/not_null_location_state_province_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_province_id\nfrom \"postgres\".\"dev\".\"location\"\nwhere state_province_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_id", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "test.dbt_wwi.not_null_location_country_id.40638877b5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_location_country_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_location_country_id.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.not_null_location_country_id.40638877b5", "fqn": ["dbt_wwi", "marts", "intermediate", "not_null_location_country_id"], "alias": "not_null_location_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.5573666, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/not_null_location_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_id\nfrom \"postgres\".\"dev\".\"location\"\nwhere country_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_id", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "test.dbt_wwi.not_null_location_city_name.16fb529c4b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city_name", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_location_city_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_location_city_name.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.not_null_location_city_name.16fb529c4b", "fqn": ["dbt_wwi", "marts", "intermediate", "not_null_location_city_name"], "alias": "not_null_location_city_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.5590296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/not_null_location_city_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_name\nfrom \"postgres\".\"dev\".\"location\"\nwhere city_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "city_name", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "test.dbt_wwi.not_null_location_state_province_name.d7bae06b47": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_province_name", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_location_state_province_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_location_state_province_name.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.not_null_location_state_province_name.d7bae06b47", "fqn": ["dbt_wwi", "marts", "intermediate", "not_null_location_state_province_name"], "alias": "not_null_location_state_province_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.5608923, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/not_null_location_state_province_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_province_name\nfrom \"postgres\".\"dev\".\"location\"\nwhere state_province_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "state_province_name", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "test.dbt_wwi.not_null_location_country_name.60f752eb0c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_name", "model": "{{ get_where_subquery(ref('location')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_location_country_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_location_country_name.sql", "original_file_path": "models/marts/intermediate/schema.yml", "unique_id": "test.dbt_wwi.not_null_location_country_name.60f752eb0c", "fqn": ["dbt_wwi", "marts", "intermediate", "not_null_location_country_name"], "alias": "not_null_location_country_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745586.5626976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.location"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/intermediate/schema.yml/not_null_location_country_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_name\nfrom \"postgres\".\"dev\".\"location\"\nwhere country_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "country_name", "file_key_name": "models.location", "attached_node": "model.dbt_wwi.location"}, "model.dbt_wwi.dim_date": {"database": "postgres", "schema": "dev", "name": "dim_date", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/statics/dim_date.sql", "original_file_path": "models/marts/statics/dim_date.sql", "unique_id": "model.dbt_wwi.dim_date", "fqn": ["dbt_wwi", "marts", "statics", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "d36884c0a78dbaace06f23217ddf087d42157b6e1c49b02a76e95507c4ac26e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Generated date data from dbt_utils.", "columns": {"date_key": {"name": "date_key", "description": "The primary key for dim_date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "Day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "Quarter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "Day of week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_year": {"name": "day_of_year", "description": "Day of year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_of_year": {"name": "week_of_year", "description": "Week of year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/statics/scheme.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745592.1187167, "relation_name": "\"postgres\".\"dev\".\"dim_date\"", "raw_code": "with \n\ndate_spine as (\n\n    {{ \n        dbt_utils.date_spine(\n            datepart=\"day\",\n            start_date=\"cast('2000-01-01' as date)\",\n            end_date=\"cast('2023-12-31' as date)\"\n        ) \n    }}\n\n),\n\nfinal as (\n\n    select\n\n        {{ convert_date_id('date_day') }} as date_key,\n        date_day::timestamp::date as \"date\",\n        extract(year from date_day) as \"year\",\n        extract(month from date_day) as \"month\",\n        extract(day from date_day) as \"day\",\n        extract(quarter from date_day) as \"quarter\",\n        extract(dow from date_day) as \"day_of_week\",\n        extract(doy from date_day) as \"day_of_year\",\n        extract(week from date_day) as \"week_of_year\"\n\n    from date_spine\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_wwi.convert_date_id"], "nodes": []}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/dim_date.sql", "compiled": true, "compiled_code": "with \n\ndate_spine as (\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 8765\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2000-01-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2023-12-31' as date)\n\n)\n\nselect * from filtered\n\n\n\n),\n\nfinal as (\n\n    select\n\n        cast(\n            cast(extract(year from date_day) as text) || \n            cast(extract(month from date_day) as text) || \n            cast(extract(day from date_day) as text)\n        as int) as date_key,\n        date_day::timestamp::date as \"date\",\n        extract(year from date_day) as \"year\",\n        extract(month from date_day) as \"month\",\n        extract(day from date_day) as \"day\",\n        extract(quarter from date_day) as \"quarter\",\n        extract(dow from date_day) as \"day_of_week\",\n        extract(doy from date_day) as \"day_of_year\",\n        extract(week from date_day) as \"week_of_year\"\n\n    from date_spine\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.not_null_dim_date_date_key.881d0a31b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_date_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_date_key.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_date_key.881d0a31b6", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_date_key"], "alias": "not_null_dim_date_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1198885, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_date.78f11e7735": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_date.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_date.78f11e7735", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_date"], "alias": "not_null_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1217554, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_year.aac8e263ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_year", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_year.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_year.aac8e263ab", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_year"], "alias": "not_null_dim_date_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1235864, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "year", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_month.180a460136": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_month", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_month.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_month.180a460136", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_month"], "alias": "not_null_dim_date_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1253045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "month", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_day.479b160c6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_day", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_day.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_day.479b160c6f", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_day"], "alias": "not_null_dim_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1269732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "day", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_quarter.4d9e627f51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "quarter", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_quarter", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_quarter.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_quarter.4d9e627f51", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_quarter"], "alias": "not_null_dim_date_quarter", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1288915, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_quarter.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quarter\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere quarter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "quarter", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_day_of_week.45321d6610": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_week", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_day_of_week", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_day_of_week.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_day_of_week.45321d6610", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_day_of_week"], "alias": "not_null_dim_date_day_of_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1306367, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_day_of_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_of_week\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere day_of_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "day_of_week", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_day_of_year.3bba0003b4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_day_of_year", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_day_of_year.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_day_of_year.3bba0003b4", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_day_of_year"], "alias": "not_null_dim_date_day_of_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.1324062, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_day_of_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_of_year\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere day_of_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "day_of_year", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "test.dbt_wwi.not_null_dim_date_week_of_year.eb48aa310d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "week_of_year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_week_of_year", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_date_week_of_year.sql", "original_file_path": "models/marts/statics/scheme.yml", "unique_id": "test.dbt_wwi.not_null_dim_date_week_of_year.eb48aa310d", "fqn": ["dbt_wwi", "marts", "statics", "not_null_dim_date_week_of_year"], "alias": "not_null_dim_date_week_of_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745592.134089, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.dim_date"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/statics/scheme.yml/not_null_dim_date_week_of_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect week_of_year\nfrom \"postgres\".\"dev\".\"dim_date\"\nwhere week_of_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "week_of_year", "file_key_name": "models.dim_date", "attached_node": "model.dbt_wwi.dim_date"}, "model.dbt_wwi.stg_sales__invoices": {"database": "postgres", "schema": "dev", "name": "stg_sales__invoices", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/sales/stg_sales__invoices.sql", "original_file_path": "models/staging/sales/stg_sales__invoices.sql", "unique_id": "model.dbt_wwi.stg_sales__invoices", "fqn": ["dbt_wwi", "staging", "sales", "stg_sales__invoices"], "alias": "stg_sales__invoices", "checksum": {"name": "sha256", "checksum": "1aa4e3bd5ad50961735878712983f56311c5a947ec7780c5c64da7dc8def7af1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged invoice data from wwi sales.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The primary key for invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The foreign key for invoices and customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_method_id": {"name": "delivery_method_id", "description": "The foreign key for invoices and delivery_methods (application).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_person_id": {"name": "sales_person_id", "description": "The foreign key for invoices and person (application).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Invoice created date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/sales/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684745604.2067003, "relation_name": "\"postgres\".\"dev\".\"stg_sales__invoices\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('sales', 'invoices') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        invoiceid as invoice_id,\n        customerid as customer_id,\n        deliverymethodid as delivery_method_id,\n        salespersonpersonid as sales_person_id,\n        cast(invoicedate as timestamp) as invoice_date\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["sales", "invoices"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.sales.invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/stg_sales__invoices.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"sales\".\"invoices\"\n\n),\n\ntransformed as (\n\n    select\n        \n        invoiceid as invoice_id,\n        customerid as customer_id,\n        deliverymethodid as delivery_method_id,\n        salespersonpersonid as sales_person_id,\n        cast(invoicedate as timestamp) as invoice_date\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_sales__buying_groups": {"database": "postgres", "schema": "dev", "name": "stg_sales__buying_groups", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/sales/stg_sales__buying_groups.sql", "original_file_path": "models/staging/sales/stg_sales__buying_groups.sql", "unique_id": "model.dbt_wwi.stg_sales__buying_groups", "fqn": ["dbt_wwi", "staging", "sales", "stg_sales__buying_groups"], "alias": "stg_sales__buying_groups", "checksum": {"name": "sha256", "checksum": "00c93652a847ffacf646d628776baea30cda171021c532e31dfd37e85f6ce872"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged buying group data from wwi sales.", "columns": {"buying_group_id": {"name": "buying_group_id", "description": "The primary key for buying_groups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buying_group_name": {"name": "buying_group_name", "description": "Buying group name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/sales/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684745604.208135, "relation_name": "\"postgres\".\"dev\".\"stg_sales__buying_groups\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('sales', 'buyinggroups') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        buyinggroupid as buying_group_id,\n        buyinggroupname as buying_group_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["sales", "buyinggroups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.sales.buyinggroups"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/stg_sales__buying_groups.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"sales\".\"buyinggroups\"\n\n),\n\ntransformed as (\n\n    select\n        \n        buyinggroupid as buying_group_id,\n        buyinggroupname as buying_group_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_sales__customer_categories": {"database": "postgres", "schema": "dev", "name": "stg_sales__customer_categories", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/sales/stg_sales__customer_categories.sql", "original_file_path": "models/staging/sales/stg_sales__customer_categories.sql", "unique_id": "model.dbt_wwi.stg_sales__customer_categories", "fqn": ["dbt_wwi", "staging", "sales", "stg_sales__customer_categories"], "alias": "stg_sales__customer_categories", "checksum": {"name": "sha256", "checksum": "7d80d24306ef0ac13eded6a78a2ebec67511c670a582801eb42ad923cae32172"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged customer category data from wwi sales.", "columns": {"customer_category_id": {"name": "customer_category_id", "description": "The primary key for customer_categories.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_category_name": {"name": "customer_category_name", "description": "Customer category name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/sales/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684745604.2092018, "relation_name": "\"postgres\".\"dev\".\"stg_sales__customer_categories\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('sales', 'customercategories') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        customercategoryid as customer_category_id,\n        customercategoryname as customer_category_name\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["sales", "customercategories"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.sales.customercategories"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/stg_sales__customer_categories.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"sales\".\"customercategories\"\n\n),\n\ntransformed as (\n\n    select\n        \n        customercategoryid as customer_category_id,\n        customercategoryname as customer_category_name\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_sales__invoice_lines": {"database": "postgres", "schema": "dev", "name": "stg_sales__invoice_lines", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/sales/stg_sales__invoice_lines.sql", "original_file_path": "models/staging/sales/stg_sales__invoice_lines.sql", "unique_id": "model.dbt_wwi.stg_sales__invoice_lines", "fqn": ["dbt_wwi", "staging", "sales", "stg_sales__invoice_lines"], "alias": "stg_sales__invoice_lines", "checksum": {"name": "sha256", "checksum": "34030d1b758078e88bdecdd0be9791a29a852a4127c5308d25f72af03b11cf0a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged invoice line data from wwi sales.", "columns": {"invoice_line_id": {"name": "invoice_line_id", "description": "The primary key for invoice lines.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The foreign key for invoice lines and invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stock_item_id": {"name": "stock_item_id", "description": "The foreign key for invoice lines and stock_items (wareshoue).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_type_id": {"name": "package_type_id", "description": "The foreign key for invoice lines and package_types (wareshoue).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Amount stock in order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Each stock unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "Each stock tax rate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "Each stock tax amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_profix": {"name": "line_profix", "description": "Each stock profix.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "Each stock extended price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/sales/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684745604.2127128, "relation_name": "\"postgres\".\"dev\".\"stg_sales__invoice_lines\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('sales', 'invoicelines') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        invoicelineid as invoice_line_id,\n        invoiceid as invoice_id,\n        stockitemid as stock_item_id,\n        packagetypeid as package_type_id,\n        quantity,\n        unitprice as unit_price,\n        taxrate as tax_rate,\n        taxamount as tax_amount,\n        lineprofit as line_profit,\n        extendedprice as extended_price\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["sales", "invoicelines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.sales.invoicelines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/stg_sales__invoice_lines.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"sales\".\"invoicelines\"\n\n),\n\ntransformed as (\n\n    select\n        \n        invoicelineid as invoice_line_id,\n        invoiceid as invoice_id,\n        stockitemid as stock_item_id,\n        packagetypeid as package_type_id,\n        quantity,\n        unitprice as unit_price,\n        taxrate as tax_rate,\n        taxamount as tax_amount,\n        lineprofit as line_profit,\n        extendedprice as extended_price\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_sales__promotion": {"database": "postgres", "schema": "dev", "name": "stg_sales__promotion", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/sales/stg_sales__promotion.sql", "original_file_path": "models/staging/sales/stg_sales__promotion.sql", "unique_id": "model.dbt_wwi.stg_sales__promotion", "fqn": ["dbt_wwi", "staging", "sales", "stg_sales__promotion"], "alias": "stg_sales__promotion", "checksum": {"name": "sha256", "checksum": "619b4545e3d798878f489c4321e0a029475a5496a7bcbb2e5bedfb8bbada7b3d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged promation data from wwi sales.", "columns": {"promotion_id": {"name": "promotion_id", "description": "The primary key for promotion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buying_group_id": {"name": "buying_group_id", "description": "The foreign key for promotion and buying_groups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "promotion_desctiption": {"name": "promotion_desctiption", "description": "Promotion details.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Promotion start date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "Promotion end date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "Amount discount price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "Percentage discount price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/sales/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684745604.2152402, "relation_name": "\"postgres\".\"dev\".\"stg_sales__promotion\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('sales', 'specialdeals') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        specialdealid as special_deal_id,\n        buyinggroupid as buying_group_id,\n        dealdescription as deal_description,\n        cast(startdate as timestamp) as start_date,\n        cast(enddate as timestamp) as end_date,\n        discountamount as discount_amount,\n        discountpercentage as discount_percentage\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["sales", "specialdeals"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.sales.specialdeals"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/stg_sales__promotion.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"sales\".\"specialdeals\"\n\n),\n\ntransformed as (\n\n    select\n        \n        specialdealid as special_deal_id,\n        buyinggroupid as buying_group_id,\n        dealdescription as deal_description,\n        cast(startdate as timestamp) as start_date,\n        cast(enddate as timestamp) as end_date,\n        discountamount as discount_amount,\n        discountpercentage as discount_percentage\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_wwi.stg_sales__customers": {"database": "postgres", "schema": "dev", "name": "stg_sales__customers", "resource_type": "model", "package_name": "dbt_wwi", "path": "staging/sales/stg_sales__customers.sql", "original_file_path": "models/staging/sales/stg_sales__customers.sql", "unique_id": "model.dbt_wwi.stg_sales__customers", "fqn": ["dbt_wwi", "staging", "sales", "stg_sales__customers"], "alias": "stg_sales__customers", "checksum": {"name": "sha256", "checksum": "c1e20f61fe253afeaa5b69140ac005d50da69b1e35ef0d753c8c34f7916a52cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged customer data from wwi sales.", "columns": {"customer_id": {"name": "customer_id", "description": "The primary key for custommers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_category_id": {"name": "customer_category_id", "description": "The foreign key for customers and customer_categories.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buying_group_id": {"name": "buying_group_id", "description": "The foreign key for customers and buying_groups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_city_id": {"name": "delivery_city_id", "description": "The foreign key for customer and cities (application).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_opened_date": {"name": "account_opened_date", "description": "Customer account open date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Customer phone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fax_number": {"name": "fax_number", "description": "Customer fax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "website_url": {"name": "website_url", "description": "Customer website.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/staging/sales/schema.yaml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1684745604.2185254, "relation_name": "\"postgres\".\"dev\".\"stg_sales__customers\"", "raw_code": "with \n\nsource as (\n\n    select * from {{ source('sales', 'customers') }}\n\n),\n\ntransformed as (\n\n    select\n        \n        customerid as customer_id,\n        customercategoryid as customer_category_id,\n        buyinggroupid as buying_group_id,\n        deliverycityid as delivery_city_id,\n        customername as customer_name,\n        cast(accountopeneddate as timestamp) as account_opened_date,\n        phonenumber as phone_number,\n        faxnumber as fax_number,\n        websiteurl as website_url\n\n    from source\n\n)\n\nselect * from transformed", "language": "sql", "refs": [], "sources": [["sales", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_wwi.sales.customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/stg_sales__customers.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"postgres\".\"sales\".\"customers\"\n\n),\n\ntransformed as (\n\n    select\n        \n        customerid as customer_id,\n        customercategoryid as customer_category_id,\n        buyinggroupid as buying_group_id,\n        deliverycityid as delivery_city_id,\n        customername as customer_name,\n        cast(accountopeneddate as timestamp) as account_opened_date,\n        phonenumber as phone_number,\n        faxnumber as fax_number,\n        websiteurl as website_url\n\n    from source\n\n)\n\nselect * from transformed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.unique_stg_sales__invoices_invoice_id.15e534463a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_sales__invoices_invoice_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_sales__invoices_invoice_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_sales__invoices_invoice_id.15e534463a", "fqn": ["dbt_wwi", "staging", "sales", "unique_stg_sales__invoices_invoice_id"], "alias": "unique_stg_sales__invoices_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2198093, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/unique_stg_sales__invoices_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_sales__invoices\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.not_null_stg_sales__invoices_invoice_id.aed8d6f70c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoices_invoice_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoices_invoice_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoices_invoice_id.aed8d6f70c", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoices_invoice_id"], "alias": "not_null_stg_sales__invoices_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2216544, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoices_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoices\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.not_null_stg_sales__invoices_customer_id.aa7e734166": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoices_customer_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoices_customer_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoices_customer_id.aa7e734166", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoices_customer_id"], "alias": "not_null_stg_sales__invoices_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.22332, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoices_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoices\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_.4bb604faad": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_sales__customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__invoi_2585d8d23132f54932040cc3a21483f3.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_.4bb604faad", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_"], "alias": "relationships_stg_sales__invoi_2585d8d23132f54932040cc3a21483f3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__invoi_2585d8d23132f54932040cc3a21483f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__invoi_2585d8d23132f54932040cc3a21483f3"}, "created_at": 1684745604.2251701, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__invoi_2585d8d23132f54932040cc3a21483f3\") }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}, {"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers", "model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__invoi_2585d8d23132f54932040cc3a21483f3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__invoices\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"postgres\".\"dev\".\"stg_sales__customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.not_null_stg_sales__invoices_delivery_method_id.0c0534e618": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_method_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoices_delivery_method_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoices_delivery_method_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoices_delivery_method_id.0c0534e618", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoices_delivery_method_id"], "alias": "not_null_stg_sales__invoices_delivery_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2344499, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoices_delivery_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_method_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoices\"\nwhere delivery_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_.70fefa2cb4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_application__delivery_methods')", "field": "delivery_method_id", "column_name": "delivery_method_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__invoi_af4e2d07c3a0c8b67a560f104f964889.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_.70fefa2cb4", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_"], "alias": "relationships_stg_sales__invoi_af4e2d07c3a0c8b67a560f104f964889", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__invoi_af4e2d07c3a0c8b67a560f104f964889", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__invoi_af4e2d07c3a0c8b67a560f104f964889"}, "created_at": 1684745604.236243, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__invoi_af4e2d07c3a0c8b67a560f104f964889\") }}", "language": "sql", "refs": [{"name": "stg_application__delivery_methods", "package": null, "version": null}, {"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__delivery_methods", "model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__invoi_af4e2d07c3a0c8b67a560f104f964889.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select delivery_method_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__invoices\"\n    where delivery_method_id is not null\n),\n\nparent as (\n    select delivery_method_id as to_field\n    from \"postgres\".\"dev\".\"stg_application__delivery_methods\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_method_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.not_null_stg_sales__invoices_sales_person_id.9614218ea9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_person_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoices_sales_person_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoices_sales_person_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoices_sales_person_id.9614218ea9", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoices_sales_person_id"], "alias": "not_null_stg_sales__invoices_sales_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2404542, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoices_sales_person_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_person_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoices\"\nwhere sales_person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_.c22f7e6b36": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_application__person')", "field": "person_id", "column_name": "sales_person_id", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__invoi_8b25d09ede76c382b22e94db7cacc5ee.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_.c22f7e6b36", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_"], "alias": "relationships_stg_sales__invoi_8b25d09ede76c382b22e94db7cacc5ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__invoi_8b25d09ede76c382b22e94db7cacc5ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__invoi_8b25d09ede76c382b22e94db7cacc5ee"}, "created_at": 1684745604.242153, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__invoi_8b25d09ede76c382b22e94db7cacc5ee\") }}", "language": "sql", "refs": [{"name": "stg_application__person", "package": null, "version": null}, {"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__person", "model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__invoi_8b25d09ede76c382b22e94db7cacc5ee.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select sales_person_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__invoices\"\n    where sales_person_id is not null\n),\n\nparent as (\n    select person_id as to_field\n    from \"postgres\".\"dev\".\"stg_application__person\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_id", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.not_null_stg_sales__invoices_invoice_date.91843eac96": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_date", "model": "{{ get_where_subquery(ref('stg_sales__invoices')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoices_invoice_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoices_invoice_date.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoices_invoice_date.91843eac96", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoices_invoice_date"], "alias": "not_null_stg_sales__invoices_invoice_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.246615, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoices_invoice_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_date\nfrom \"postgres\".\"dev\".\"stg_sales__invoices\"\nwhere invoice_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_date", "file_key_name": "models.stg_sales__invoices", "attached_node": "model.dbt_wwi.stg_sales__invoices"}, "test.dbt_wwi.unique_stg_sales__buying_groups_buying_group_id.9a77cfb92c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "buying_group_id", "model": "{{ get_where_subquery(ref('stg_sales__buying_groups')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_sales__buying_groups_buying_group_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_sales__buying_groups_buying_group_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_sales__buying_groups_buying_group_id.9a77cfb92c", "fqn": ["dbt_wwi", "staging", "sales", "unique_stg_sales__buying_groups_buying_group_id"], "alias": "unique_stg_sales__buying_groups_buying_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2484612, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__buying_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__buying_groups"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/unique_stg_sales__buying_groups_buying_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    buying_group_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_sales__buying_groups\"\nwhere buying_group_id is not null\ngroup by buying_group_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "buying_group_id", "file_key_name": "models.stg_sales__buying_groups", "attached_node": "model.dbt_wwi.stg_sales__buying_groups"}, "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_id.ae3899f865": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "buying_group_id", "model": "{{ get_where_subquery(ref('stg_sales__buying_groups')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__buying_groups_buying_group_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__buying_groups_buying_group_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_id.ae3899f865", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__buying_groups_buying_group_id"], "alias": "not_null_stg_sales__buying_groups_buying_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2501893, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__buying_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__buying_groups"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__buying_groups_buying_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect buying_group_id\nfrom \"postgres\".\"dev\".\"stg_sales__buying_groups\"\nwhere buying_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "buying_group_id", "file_key_name": "models.stg_sales__buying_groups", "attached_node": "model.dbt_wwi.stg_sales__buying_groups"}, "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_name.9cf6de1de9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "buying_group_name", "model": "{{ get_where_subquery(ref('stg_sales__buying_groups')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__buying_groups_buying_group_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__buying_groups_buying_group_name.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_name.9cf6de1de9", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__buying_groups_buying_group_name"], "alias": "not_null_stg_sales__buying_groups_buying_group_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2521822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__buying_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__buying_groups"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__buying_groups_buying_group_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect buying_group_name\nfrom \"postgres\".\"dev\".\"stg_sales__buying_groups\"\nwhere buying_group_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "buying_group_name", "file_key_name": "models.stg_sales__buying_groups", "attached_node": "model.dbt_wwi.stg_sales__buying_groups"}, "test.dbt_wwi.unique_stg_sales__customer_categories_customer_category_id.6ecaf503c1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_category_id", "model": "{{ get_where_subquery(ref('stg_sales__customer_categories')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_sales__customer_categories_customer_category_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_sales__customer_categories_customer_category_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_sales__customer_categories_customer_category_id.6ecaf503c1", "fqn": ["dbt_wwi", "staging", "sales", "unique_stg_sales__customer_categories_customer_category_id"], "alias": "unique_stg_sales__customer_categories_customer_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.253872, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customer_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customer_categories"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/unique_stg_sales__customer_categories_customer_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_sales__customer_categories\"\nwhere customer_category_id is not null\ngroup by customer_category_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_category_id", "file_key_name": "models.stg_sales__customer_categories", "attached_node": "model.dbt_wwi.stg_sales__customer_categories"}, "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_id.158348b35b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_category_id", "model": "{{ get_where_subquery(ref('stg_sales__customer_categories')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customer_categories_customer_category_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customer_categories_customer_category_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_id.158348b35b", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customer_categories_customer_category_id"], "alias": "not_null_stg_sales__customer_categories_customer_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2555542, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customer_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customer_categories"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customer_categories_customer_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_category_id\nfrom \"postgres\".\"dev\".\"stg_sales__customer_categories\"\nwhere customer_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_category_id", "file_key_name": "models.stg_sales__customer_categories", "attached_node": "model.dbt_wwi.stg_sales__customer_categories"}, "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_name.1170547d0f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_category_name", "model": "{{ get_where_subquery(ref('stg_sales__customer_categories')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customer_categories_customer_category_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customer_categories_customer_category_name.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_name.1170547d0f", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customer_categories_customer_category_name"], "alias": "not_null_stg_sales__customer_categories_customer_category_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2572236, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customer_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customer_categories"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customer_categories_customer_category_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_category_name\nfrom \"postgres\".\"dev\".\"stg_sales__customer_categories\"\nwhere customer_category_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_category_name", "file_key_name": "models.stg_sales__customer_categories", "attached_node": "model.dbt_wwi.stg_sales__customer_categories"}, "test.dbt_wwi.unique_stg_sales__invoice_lines_invoice_line_id.441f0eae02": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_line_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_sales__invoice_lines_invoice_line_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_sales__invoice_lines_invoice_line_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_sales__invoice_lines_invoice_line_id.441f0eae02", "fqn": ["dbt_wwi", "staging", "sales", "unique_stg_sales__invoice_lines_invoice_line_id"], "alias": "unique_stg_sales__invoice_lines_invoice_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.259029, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/unique_stg_sales__invoice_lines_invoice_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_line_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere invoice_line_id is not null\ngroup by invoice_line_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_line_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_line_id.0ea422f242": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_line_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_invoice_line_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_invoice_line_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_line_id.0ea422f242", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_invoice_line_id"], "alias": "not_null_stg_sales__invoice_lines_invoice_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2608378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_invoice_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere invoice_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_line_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_id.b89ed31727": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_invoice_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_invoice_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_id.b89ed31727", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_invoice_id"], "alias": "not_null_stg_sales__invoice_lines_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.262589, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_.fa1525f7bc": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_sales__invoices')", "field": "invoice_id", "column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__invoi_b44e2f4adc8aa5eaef36c44ede723924.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_.fa1525f7bc", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_"], "alias": "relationships_stg_sales__invoi_b44e2f4adc8aa5eaef36c44ede723924", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__invoi_b44e2f4adc8aa5eaef36c44ede723924", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__invoi_b44e2f4adc8aa5eaef36c44ede723924"}, "created_at": 1684745604.2645757, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__invoi_b44e2f4adc8aa5eaef36c44ede723924\") }}", "language": "sql", "refs": [{"name": "stg_sales__invoices", "package": null, "version": null}, {"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoices", "model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__invoi_b44e2f4adc8aa5eaef36c44ede723924.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select invoice_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\n    where invoice_id is not null\n),\n\nparent as (\n    select invoice_id as to_field\n    from \"postgres\".\"dev\".\"stg_sales__invoices\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_stock_item_id.bfd26104dd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stock_item_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_stock_item_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_stock_item_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_stock_item_id.bfd26104dd", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_stock_item_id"], "alias": "not_null_stg_sales__invoice_lines_stock_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2691777, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_stock_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stock_item_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere stock_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stock_item_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_.ed736b707e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_warehouse__stock_items')", "field": "stock_item_id", "column_name": "stock_item_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__invoi_a54f2b488d1949b7c7513616201dfb18.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_.ed736b707e", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_"], "alias": "relationships_stg_sales__invoi_a54f2b488d1949b7c7513616201dfb18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__invoi_a54f2b488d1949b7c7513616201dfb18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__invoi_a54f2b488d1949b7c7513616201dfb18"}, "created_at": 1684745604.2710755, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__invoi_a54f2b488d1949b7c7513616201dfb18\") }}", "language": "sql", "refs": [{"name": "stg_warehouse__stock_items", "package": null, "version": null}, {"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__stock_items", "model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__invoi_a54f2b488d1949b7c7513616201dfb18.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select stock_item_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\n    where stock_item_id is not null\n),\n\nparent as (\n    select stock_item_id as to_field\n    from \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stock_item_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_package_type_id.0c7567c276": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "package_type_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_package_type_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_package_type_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_package_type_id.0c7567c276", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_package_type_id"], "alias": "not_null_stg_sales__invoice_lines_package_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2750537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_package_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect package_type_id\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere package_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "package_type_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_.66c5f9ed45": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_warehouse__package_types')", "field": "package_type_id", "column_name": "package_type_id", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__invoi_003355275a029778f2f95856deda29ef.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_.66c5f9ed45", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_"], "alias": "relationships_stg_sales__invoi_003355275a029778f2f95856deda29ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__invoi_003355275a029778f2f95856deda29ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__invoi_003355275a029778f2f95856deda29ef"}, "created_at": 1684745604.2770212, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__invoi_003355275a029778f2f95856deda29ef\") }}", "language": "sql", "refs": [{"name": "stg_warehouse__package_types", "package": null, "version": null}, {"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_warehouse__package_types", "model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__invoi_003355275a029778f2f95856deda29ef.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select package_type_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\n    where package_type_id is not null\n),\n\nparent as (\n    select package_type_id as to_field\n    from \"postgres\".\"dev\".\"stg_warehouse__package_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "package_type_id", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_quantity.100270ee43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_quantity", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_quantity.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_quantity.100270ee43", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_quantity"], "alias": "not_null_stg_sales__invoice_lines_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2814548, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "quantity", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_unit_price.e5048bc1f0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_unit_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_unit_price.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_unit_price.e5048bc1f0", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_unit_price"], "alias": "not_null_stg_sales__invoice_lines_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2841191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_rate.045b23031c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_tax_rate", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_tax_rate.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_rate.045b23031c", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_tax_rate"], "alias": "not_null_stg_sales__invoice_lines_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2858253, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_tax_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tax_rate\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere tax_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_amount.b1f09b92f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_amount", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_tax_amount", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_tax_amount.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_amount.b1f09b92f4", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_tax_amount"], "alias": "not_null_stg_sales__invoice_lines_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.287498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_tax_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tax_amount\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere tax_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "tax_amount", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_line_profix.bc2544d172": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_profix", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_line_profix", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_line_profix.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_line_profix.bc2544d172", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_line_profix"], "alias": "not_null_stg_sales__invoice_lines_line_profix", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2891681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_line_profix.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_profix\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere line_profix is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "line_profix", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.not_null_stg_sales__invoice_lines_extended_price.9e5c7ccb79": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "extended_price", "model": "{{ get_where_subquery(ref('stg_sales__invoice_lines')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__invoice_lines_extended_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__invoice_lines_extended_price.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__invoice_lines_extended_price.9e5c7ccb79", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__invoice_lines_extended_price"], "alias": "not_null_stg_sales__invoice_lines_extended_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2909787, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__invoice_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__invoice_lines"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__invoice_lines_extended_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extended_price\nfrom \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\nwhere extended_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "extended_price", "file_key_name": "models.stg_sales__invoice_lines", "attached_node": "model.dbt_wwi.stg_sales__invoice_lines"}, "test.dbt_wwi.unique_stg_sales__promotion_promotion_id.606fbaed77": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "promotion_id", "model": "{{ get_where_subquery(ref('stg_sales__promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_sales__promotion_promotion_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_sales__promotion_promotion_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_sales__promotion_promotion_id.606fbaed77", "fqn": ["dbt_wwi", "staging", "sales", "unique_stg_sales__promotion_promotion_id"], "alias": "unique_stg_sales__promotion_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2927544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/unique_stg_sales__promotion_promotion_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    promotion_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_sales__promotion\"\nwhere promotion_id is not null\ngroup by promotion_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "promotion_id", "file_key_name": "models.stg_sales__promotion", "attached_node": "model.dbt_wwi.stg_sales__promotion"}, "test.dbt_wwi.not_null_stg_sales__promotion_promotion_id.2151b5e183": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "promotion_id", "model": "{{ get_where_subquery(ref('stg_sales__promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__promotion_promotion_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__promotion_promotion_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__promotion_promotion_id.2151b5e183", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__promotion_promotion_id"], "alias": "not_null_stg_sales__promotion_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2945418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__promotion_promotion_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect promotion_id\nfrom \"postgres\".\"dev\".\"stg_sales__promotion\"\nwhere promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "promotion_id", "file_key_name": "models.stg_sales__promotion", "attached_node": "model.dbt_wwi.stg_sales__promotion"}, "test.dbt_wwi.not_null_stg_sales__promotion_buying_group_id.5a3b7e5ddf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "buying_group_id", "model": "{{ get_where_subquery(ref('stg_sales__promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__promotion_buying_group_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__promotion_buying_group_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__promotion_buying_group_id.5a3b7e5ddf", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__promotion_buying_group_id"], "alias": "not_null_stg_sales__promotion_buying_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.2964437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__promotion_buying_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect buying_group_id\nfrom \"postgres\".\"dev\".\"stg_sales__promotion\"\nwhere buying_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "buying_group_id", "file_key_name": "models.stg_sales__promotion", "attached_node": "model.dbt_wwi.stg_sales__promotion"}, "test.dbt_wwi.relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.ec7e210839": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_sales__buying_groups')", "field": "buying_group_id", "column_name": "buying_group_id", "model": "{{ get_where_subquery(ref('stg_sales__promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__promo_7c931493d3a4484a90a2dac1476acdfb.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.ec7e210839", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_"], "alias": "relationships_stg_sales__promo_7c931493d3a4484a90a2dac1476acdfb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__promo_7c931493d3a4484a90a2dac1476acdfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__promo_7c931493d3a4484a90a2dac1476acdfb"}, "created_at": 1684745604.2982857, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__promo_7c931493d3a4484a90a2dac1476acdfb\") }}", "language": "sql", "refs": [{"name": "stg_sales__buying_groups", "package": null, "version": null}, {"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__buying_groups", "model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__promo_7c931493d3a4484a90a2dac1476acdfb.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select buying_group_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__promotion\"\n    where buying_group_id is not null\n),\n\nparent as (\n    select buying_group_id as to_field\n    from \"postgres\".\"dev\".\"stg_sales__buying_groups\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "buying_group_id", "file_key_name": "models.stg_sales__promotion", "attached_node": "model.dbt_wwi.stg_sales__promotion"}, "test.dbt_wwi.not_null_stg_sales__promotion_start_date.7e8ee6fa4c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('stg_sales__promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__promotion_start_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__promotion_start_date.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__promotion_start_date.7e8ee6fa4c", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__promotion_start_date"], "alias": "not_null_stg_sales__promotion_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3028743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__promotion_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_date\nfrom \"postgres\".\"dev\".\"stg_sales__promotion\"\nwhere start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "start_date", "file_key_name": "models.stg_sales__promotion", "attached_node": "model.dbt_wwi.stg_sales__promotion"}, "test.dbt_wwi.not_null_stg_sales__promotion_end_date.653386ad3f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date", "model": "{{ get_where_subquery(ref('stg_sales__promotion')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__promotion_end_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__promotion_end_date.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__promotion_end_date.653386ad3f", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__promotion_end_date"], "alias": "not_null_stg_sales__promotion_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3046076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__promotion_end_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_date\nfrom \"postgres\".\"dev\".\"stg_sales__promotion\"\nwhere end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "end_date", "file_key_name": "models.stg_sales__promotion", "attached_node": "model.dbt_wwi.stg_sales__promotion"}, "test.dbt_wwi.unique_stg_sales__customers_customer_id.e3f788371a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_stg_sales__customers_customer_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_stg_sales__customers_customer_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.unique_stg_sales__customers_customer_id.e3f788371a", "fqn": ["dbt_wwi", "staging", "sales", "unique_stg_sales__customers_customer_id"], "alias": "unique_stg_sales__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3063147, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/unique_stg_sales__customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"dev\".\"stg_sales__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.not_null_stg_sales__customers_customer_id.50b2c8c1cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customers_customer_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customers_customer_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customers_customer_id.50b2c8c1cb", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customers_customer_id"], "alias": "not_null_stg_sales__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3080537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"dev\".\"stg_sales__customers\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.not_null_stg_sales__customers_customer_category_id.e6cdeed3e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_category_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customers_customer_category_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customers_customer_category_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customers_customer_category_id.e6cdeed3e2", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customers_customer_category_id"], "alias": "not_null_stg_sales__customers_customer_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3098948, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customers_customer_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_category_id\nfrom \"postgres\".\"dev\".\"stg_sales__customers\"\nwhere customer_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_category_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_.749d3b1100": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_sales__customer_categories')", "field": "customer_category_id", "column_name": "customer_category_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__custo_4668b73c0a31b4602fa58be46860b9fd.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_.749d3b1100", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_"], "alias": "relationships_stg_sales__custo_4668b73c0a31b4602fa58be46860b9fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__custo_4668b73c0a31b4602fa58be46860b9fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__custo_4668b73c0a31b4602fa58be46860b9fd"}, "created_at": 1684745604.311645, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__custo_4668b73c0a31b4602fa58be46860b9fd\") }}", "language": "sql", "refs": [{"name": "stg_sales__customer_categories", "package": null, "version": null}, {"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customer_categories", "model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__custo_4668b73c0a31b4602fa58be46860b9fd.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_category_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__customers\"\n    where customer_category_id is not null\n),\n\nparent as (\n    select customer_category_id as to_field\n    from \"postgres\".\"dev\".\"stg_sales__customer_categories\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_category_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.653446fb64": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_sales__buying_groups')", "field": "buying_group_id", "column_name": "buying_group_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__custo_e38a9acc45f2fdf3871f7d6b340983df.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.653446fb64", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_"], "alias": "relationships_stg_sales__custo_e38a9acc45f2fdf3871f7d6b340983df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__custo_e38a9acc45f2fdf3871f7d6b340983df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__custo_e38a9acc45f2fdf3871f7d6b340983df"}, "created_at": 1684745604.316513, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__custo_e38a9acc45f2fdf3871f7d6b340983df\") }}", "language": "sql", "refs": [{"name": "stg_sales__buying_groups", "package": null, "version": null}, {"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__buying_groups", "model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__custo_e38a9acc45f2fdf3871f7d6b340983df.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select buying_group_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__customers\"\n    where buying_group_id is not null\n),\n\nparent as (\n    select buying_group_id as to_field\n    from \"postgres\".\"dev\".\"stg_sales__buying_groups\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "buying_group_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.not_null_stg_sales__customers_delivery_city_id.501bbcf4ae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_city_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customers_delivery_city_id", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customers_delivery_city_id.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customers_delivery_city_id.501bbcf4ae", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customers_delivery_city_id"], "alias": "not_null_stg_sales__customers_delivery_city_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3206854, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customers_delivery_city_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_city_id\nfrom \"postgres\".\"dev\".\"stg_sales__customers\"\nwhere delivery_city_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_city_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_.f60f8816e9": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_application__cities')", "field": "city_id", "column_name": "delivery_city_id", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_", "resource_type": "test", "package_name": "dbt_wwi", "path": "relationships_stg_sales__custo_a6c6e534f04d4808af6129727eac5fd7.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_.f60f8816e9", "fqn": ["dbt_wwi", "staging", "sales", "relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_"], "alias": "relationships_stg_sales__custo_a6c6e534f04d4808af6129727eac5fd7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_sales__custo_a6c6e534f04d4808af6129727eac5fd7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_sales__custo_a6c6e534f04d4808af6129727eac5fd7"}, "created_at": 1684745604.3225617, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_sales__custo_a6c6e534f04d4808af6129727eac5fd7\") }}", "language": "sql", "refs": [{"name": "stg_application__cities", "package": null, "version": null}, {"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_application__cities", "model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/relationships_stg_sales__custo_a6c6e534f04d4808af6129727eac5fd7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select delivery_city_id as from_field\n    from \"postgres\".\"dev\".\"stg_sales__customers\"\n    where delivery_city_id is not null\n),\n\nparent as (\n    select city_id as to_field\n    from \"postgres\".\"dev\".\"stg_application__cities\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "delivery_city_id", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.not_null_stg_sales__customers_customer_name.7dbb6b1afc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customers_customer_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customers_customer_name.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customers_customer_name.7dbb6b1afc", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customers_customer_name"], "alias": "not_null_stg_sales__customers_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3266757, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customers_customer_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom \"postgres\".\"dev\".\"stg_sales__customers\"\nwhere customer_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "test.dbt_wwi.not_null_stg_sales__customers_account_opened_date.c2d72d1414": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_opened_date", "model": "{{ get_where_subquery(ref('stg_sales__customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_stg_sales__customers_account_opened_date", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_stg_sales__customers_account_opened_date.sql", "original_file_path": "models/staging/sales/schema.yaml", "unique_id": "test.dbt_wwi.not_null_stg_sales__customers_account_opened_date.c2d72d1414", "fqn": ["dbt_wwi", "staging", "sales", "not_null_stg_sales__customers_account_opened_date"], "alias": "not_null_stg_sales__customers_account_opened_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745604.3284981, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.stg_sales__customers"]}, "compiled_path": "target/compiled/dbt_wwi/models/staging/sales/schema.yaml/not_null_stg_sales__customers_account_opened_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_opened_date\nfrom \"postgres\".\"dev\".\"stg_sales__customers\"\nwhere account_opened_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_opened_date", "file_key_name": "models.stg_sales__customers", "attached_node": "model.dbt_wwi.stg_sales__customers"}, "model.dbt_wwi.fct_sales": {"database": "postgres", "schema": "dev", "name": "fct_sales", "resource_type": "model", "package_name": "dbt_wwi", "path": "marts/core/fct_sales.sql", "original_file_path": "models/marts/core/fct_sales.sql", "unique_id": "model.dbt_wwi.fct_sales", "fqn": ["dbt_wwi", "marts", "core", "fct_sales"], "alias": "fct_sales", "checksum": {"name": "sha256", "checksum": "be63be09a125a4cdc0dbe9f1a7b503346427245d387a905f16d500f782f0a223"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Sales fact data cleaned from staging.", "columns": {"invoice_key": {"name": "invoice_key", "description": "The primary key for fct_sales.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "The foreign key for fct_sales and dim_customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_key": {"name": "product_key", "description": "The foreign key for fct_sales and dim_product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_method_key": {"name": "delivery_method_key", "description": "The foreign key for fct_sales and dim_delivery_methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_person_key": {"name": "sales_person_key", "description": "The foreign key for fct_sales and dim_sales_person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "promotion_key": {"name": "promotion_key", "description": "The foreign key for fct_sales and dim_promotion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_key": {"name": "date_key", "description": "The foreign key for fct_sales and dim_date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_unit_price": {"name": "net_unit_price", "description": "Net unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_unit_price": {"name": "regular_unit_price", "description": "Regular unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_profit": {"name": "line_profit", "description": "Line profit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_unit_price": {"name": "discount_unit_price", "description": "Discount unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_profit": {"name": "unit_profit", "description": "Unit profix.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_cost": {"name": "unit_cost", "description": "Unit cost.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_revenue": {"name": "gross_revenue", "description": "Gross revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_revenue": {"name": "net_revenue", "description": "Net revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_amount": {"name": "cost_amount", "description": "Cost amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_profit": {"name": "gross_profit", "description": "Gross profit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_profit": {"name": "net_profit", "description": "Net profit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_wwi://models/marts/core/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1684745674.6987414, "relation_name": "\"postgres\".\"dev\".\"fct_sales\"", "raw_code": "with \n\ncustomers as (\n\n    select * from {{ ref('stg_sales__customers') }}\n\n),\n\ndelivery_methods as (\n\n    select * from {{ ref('stg_application__delivery_methods') }}\n\n),\n\ninvoices as (\n\n    select * from {{ ref('stg_sales__invoices') }}\n\n),\n\ninvoice_lines as (\n\n    select * from {{ ref('stg_sales__invoice_lines') }}\n\n),\n\nperson as (\n\n    select * from {{ ref('stg_application__person') }}\n\n),\n\nstock_items as (\n\n    select * from {{ ref('stg_warehouse__stock_items') }}\n\n),\n\npromotion as (\n\n    select * from {{ ref('stg_sales__promotion') }}\n\n),\n\ntransform_base as (\n\n    select\n\n        -- Key\n        iv.invoice_id as invoice_key,\n        ctm.customer_id as customer_key,\n        si.stock_item_id as product_key,\n        dm.delivery_method_id as delivery_method_key,\n        iv.sales_person_id as sales_person_key,\n        pmt.special_deal_id as promotion_key,\n        {{ convert_date_id('iv.invoice_date') }} as date_key,\n        \n        -- cast type\n        cast(ivl.extended_price as float) as gross_revenue,\n        cast(ivl.unit_price as float) as net_unit_price,\n        cast(si.unit_price as float) as regular_unit_price,\n        cast(ivl.line_profit as float) as line_profit,\n        cast(ivl.quantity as int) as quantity        \n\n    from invoice_lines as ivl\n    left join invoices as iv using (invoice_id)\n    left join customers as ctm using (customer_id)\n    left join delivery_methods as dm using (delivery_method_id)\n    left join person as ps on iv.sales_person_id = ps.person_id\n    left join stock_items as si using (stock_item_id)\n    left join promotion as pmt using (buying_group_id)\n\n),\n\ntransform_unit as (\n\n    select\n\n        *,\n        regular_unit_price - net_unit_price as discount_unit_price,\n        line_profit / quantity as unit_profit,\n        net_unit_price - (line_profit / quantity) as unit_cost\n    \n    from transform_base\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        net_unit_price * quantity as net_revenue,\n        unit_cost * quantity as cost_amount,\n        gross_revenue - (unit_cost * quantity) as gross_profit,\n        (net_unit_price * quantity) - (unit_cost * quantity) as net_profit\n\n    from transform_unit\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_sales__customers", "package": null, "version": null}, {"name": "stg_application__delivery_methods", "package": null, "version": null}, {"name": "stg_sales__invoices", "package": null, "version": null}, {"name": "stg_sales__invoice_lines", "package": null, "version": null}, {"name": "stg_application__person", "package": null, "version": null}, {"name": "stg_warehouse__stock_items", "package": null, "version": null}, {"name": "stg_sales__promotion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_wwi.convert_date_id"], "nodes": ["model.dbt_wwi.stg_sales__customers", "model.dbt_wwi.stg_application__delivery_methods", "model.dbt_wwi.stg_sales__invoices", "model.dbt_wwi.stg_sales__invoice_lines", "model.dbt_wwi.stg_application__person", "model.dbt_wwi.stg_warehouse__stock_items", "model.dbt_wwi.stg_sales__promotion"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/fct_sales.sql", "compiled": true, "compiled_code": "with \n\ncustomers as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__customers\"\n\n),\n\ndelivery_methods as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__delivery_methods\"\n\n),\n\ninvoices as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__invoices\"\n\n),\n\ninvoice_lines as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__invoice_lines\"\n\n),\n\nperson as (\n\n    select * from \"postgres\".\"dev\".\"stg_application__person\"\n\n),\n\nstock_items as (\n\n    select * from \"postgres\".\"dev\".\"stg_warehouse__stock_items\"\n\n),\n\npromotion as (\n\n    select * from \"postgres\".\"dev\".\"stg_sales__promotion\"\n\n),\n\ntransform_base as (\n\n    select\n\n        -- Key\n        iv.invoice_id as invoice_key,\n        ctm.customer_id as customer_key,\n        si.stock_item_id as product_key,\n        dm.delivery_method_id as delivery_method_key,\n        iv.sales_person_id as sales_person_key,\n        pmt.special_deal_id as promotion_key,\n        cast(\n            cast(extract(year from iv.invoice_date) as text) || \n            cast(extract(month from iv.invoice_date) as text) || \n            cast(extract(day from iv.invoice_date) as text)\n        as int) as date_key,\n        \n        -- cast type\n        cast(ivl.extended_price as float) as gross_revenue,\n        cast(ivl.unit_price as float) as net_unit_price,\n        cast(si.unit_price as float) as regular_unit_price,\n        cast(ivl.line_profit as float) as line_profit,\n        cast(ivl.quantity as int) as quantity        \n\n    from invoice_lines as ivl\n    left join invoices as iv using (invoice_id)\n    left join customers as ctm using (customer_id)\n    left join delivery_methods as dm using (delivery_method_id)\n    left join person as ps on iv.sales_person_id = ps.person_id\n    left join stock_items as si using (stock_item_id)\n    left join promotion as pmt using (buying_group_id)\n\n),\n\ntransform_unit as (\n\n    select\n\n        *,\n        regular_unit_price - net_unit_price as discount_unit_price,\n        line_profit / quantity as unit_profit,\n        net_unit_price - (line_profit / quantity) as unit_cost\n    \n    from transform_base\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        net_unit_price * quantity as net_revenue,\n        unit_cost * quantity as cost_amount,\n        gross_revenue - (unit_cost * quantity) as gross_profit,\n        (net_unit_price * quantity) - (unit_cost * quantity) as net_profit\n\n    from transform_unit\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.dbt_wwi.not_null_fct_sales_invoice_key.71afb5d98d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_key", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_invoice_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_invoice_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_invoice_key.71afb5d98d", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_invoice_key"], "alias": "not_null_fct_sales_invoice_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.6999044, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_invoice_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_key\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere invoice_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_key", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_net_unit_price.c556a2fd44": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_unit_price", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_net_unit_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_net_unit_price.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_net_unit_price.c556a2fd44", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_net_unit_price"], "alias": "not_null_fct_sales_net_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7018282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_net_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect net_unit_price\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere net_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "net_unit_price", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_regular_unit_price.588fd4fef8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "regular_unit_price", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_regular_unit_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_regular_unit_price.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_regular_unit_price.588fd4fef8", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_regular_unit_price"], "alias": "not_null_fct_sales_regular_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7035658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_regular_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect regular_unit_price\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere regular_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "regular_unit_price", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_line_profit.b098766d55": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_profit", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_line_profit", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_line_profit.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_line_profit.b098766d55", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_line_profit"], "alias": "not_null_fct_sales_line_profit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7053113, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_line_profit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_profit\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere line_profit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "line_profit", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_quantity.a4800a70aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_quantity", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_quantity.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_quantity.a4800a70aa", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_quantity"], "alias": "not_null_fct_sales_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7071493, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_discount_unit_price.972f6b60ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_unit_price", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_discount_unit_price", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_discount_unit_price.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_discount_unit_price.972f6b60ad", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_discount_unit_price"], "alias": "not_null_fct_sales_discount_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7088692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_discount_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_unit_price\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere discount_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "discount_unit_price", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_unit_profit.d6e5840af3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_profit", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_unit_profit", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_unit_profit.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_unit_profit.d6e5840af3", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_unit_profit"], "alias": "not_null_fct_sales_unit_profit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7105362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_unit_profit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_profit\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere unit_profit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_profit", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_unit_cost.5c3b7a8b18": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_cost", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_unit_cost", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_unit_cost.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_unit_cost.5c3b7a8b18", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_unit_cost"], "alias": "not_null_fct_sales_unit_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.712374, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_unit_cost.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_cost\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere unit_cost is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "unit_cost", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_gross_revenue.8351f78838": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gross_revenue", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_gross_revenue", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_gross_revenue.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_gross_revenue.8351f78838", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_gross_revenue"], "alias": "not_null_fct_sales_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.714053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_gross_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gross_revenue\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere gross_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "gross_revenue", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_net_revenue.d8fb04cf50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_revenue", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_net_revenue", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_net_revenue.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_net_revenue.d8fb04cf50", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_net_revenue"], "alias": "not_null_fct_sales_net_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.715716, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_net_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect net_revenue\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere net_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "net_revenue", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_cost_amount.30a03725e5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_amount", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_cost_amount", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_cost_amount.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_cost_amount.30a03725e5", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_cost_amount"], "alias": "not_null_fct_sales_cost_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7174191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_cost_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_amount\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere cost_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "cost_amount", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_gross_profit.5466549c9a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gross_profit", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_gross_profit", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_gross_profit.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_gross_profit.5466549c9a", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_gross_profit"], "alias": "not_null_fct_sales_gross_profit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.719302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_gross_profit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gross_profit\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere gross_profit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "gross_profit", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}, "test.dbt_wwi.not_null_fct_sales_net_profit.22e6da73e5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_profit", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_fct_sales_net_profit", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_fct_sales_net_profit.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_fct_sales_net_profit.22e6da73e5", "fqn": ["dbt_wwi", "marts", "core", "not_null_fct_sales_net_profit"], "alias": "not_null_fct_sales_net_profit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684745674.7209945, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_wwi.fct_sales"]}, "compiled_path": "target/compiled/dbt_wwi/models/marts/core/schema.yml/not_null_fct_sales_net_profit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect net_profit\nfrom \"postgres\".\"dev\".\"fct_sales\"\nwhere net_profit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "net_profit", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_wwi.fct_sales"}}, "sources": {"source.dbt_wwi.sales.buyinggroups": {"database": "postgres", "schema": "sales", "name": "buyinggroups", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/sales/source.yml", "original_file_path": "models/staging/sales/source.yml", "unique_id": "source.dbt_wwi.sales.buyinggroups", "fqn": ["dbt_wwi", "staging", "sales", "sales", "buyinggroups"], "source_name": "sales", "source_description": "", "loader": "", "identifier": "buyinggroups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"sales\".\"buyinggroups\"", "created_at": 1684076524.7034168}, "source.dbt_wwi.sales.customercategories": {"database": "postgres", "schema": "sales", "name": "customercategories", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/sales/source.yml", "original_file_path": "models/staging/sales/source.yml", "unique_id": "source.dbt_wwi.sales.customercategories", "fqn": ["dbt_wwi", "staging", "sales", "sales", "customercategories"], "source_name": "sales", "source_description": "", "loader": "", "identifier": "customercategories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"sales\".\"customercategories\"", "created_at": 1684076524.7035933}, "source.dbt_wwi.sales.customers": {"database": "postgres", "schema": "sales", "name": "customers", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/sales/source.yml", "original_file_path": "models/staging/sales/source.yml", "unique_id": "source.dbt_wwi.sales.customers", "fqn": ["dbt_wwi", "staging", "sales", "sales", "customers"], "source_name": "sales", "source_description": "", "loader": "", "identifier": "customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"sales\".\"customers\"", "created_at": 1684076524.7037299}, "source.dbt_wwi.sales.invoicelines": {"database": "postgres", "schema": "sales", "name": "invoicelines", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/sales/source.yml", "original_file_path": "models/staging/sales/source.yml", "unique_id": "source.dbt_wwi.sales.invoicelines", "fqn": ["dbt_wwi", "staging", "sales", "sales", "invoicelines"], "source_name": "sales", "source_description": "", "loader": "", "identifier": "invoicelines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"sales\".\"invoicelines\"", "created_at": 1684076524.7038639}, "source.dbt_wwi.sales.invoices": {"database": "postgres", "schema": "sales", "name": "invoices", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/sales/source.yml", "original_file_path": "models/staging/sales/source.yml", "unique_id": "source.dbt_wwi.sales.invoices", "fqn": ["dbt_wwi", "staging", "sales", "sales", "invoices"], "source_name": "sales", "source_description": "", "loader": "", "identifier": "invoices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"sales\".\"invoices\"", "created_at": 1684076524.7040074}, "source.dbt_wwi.sales.specialdeals": {"database": "postgres", "schema": "sales", "name": "specialdeals", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/sales/source.yml", "original_file_path": "models/staging/sales/source.yml", "unique_id": "source.dbt_wwi.sales.specialdeals", "fqn": ["dbt_wwi", "staging", "sales", "sales", "specialdeals"], "source_name": "sales", "source_description": "", "loader": "", "identifier": "specialdeals", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"sales\".\"specialdeals\"", "created_at": 1684076524.704133}, "source.dbt_wwi.purchasing.suppliers": {"database": "postgres", "schema": "purchasing", "name": "suppliers", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/purchasing/source.yml", "original_file_path": "models/staging/purchasing/source.yml", "unique_id": "source.dbt_wwi.purchasing.suppliers", "fqn": ["dbt_wwi", "staging", "purchasing", "purchasing", "suppliers"], "source_name": "purchasing", "source_description": "", "loader": "", "identifier": "suppliers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"purchasing\".\"suppliers\"", "created_at": 1684076524.7042608}, "source.dbt_wwi.warehouse.colors": {"database": "postgres", "schema": "warehouse", "name": "colors", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/warehouse/source.yml", "original_file_path": "models/staging/warehouse/source.yml", "unique_id": "source.dbt_wwi.warehouse.colors", "fqn": ["dbt_wwi", "staging", "warehouse", "warehouse", "colors"], "source_name": "warehouse", "source_description": "", "loader": "", "identifier": "colors", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"warehouse\".\"colors\"", "created_at": 1684076524.704395}, "source.dbt_wwi.warehouse.packagetypes": {"database": "postgres", "schema": "warehouse", "name": "packagetypes", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/warehouse/source.yml", "original_file_path": "models/staging/warehouse/source.yml", "unique_id": "source.dbt_wwi.warehouse.packagetypes", "fqn": ["dbt_wwi", "staging", "warehouse", "warehouse", "packagetypes"], "source_name": "warehouse", "source_description": "", "loader": "", "identifier": "packagetypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"warehouse\".\"packagetypes\"", "created_at": 1684076524.7045174}, "source.dbt_wwi.warehouse.stockitems": {"database": "postgres", "schema": "warehouse", "name": "stockitems", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/warehouse/source.yml", "original_file_path": "models/staging/warehouse/source.yml", "unique_id": "source.dbt_wwi.warehouse.stockitems", "fqn": ["dbt_wwi", "staging", "warehouse", "warehouse", "stockitems"], "source_name": "warehouse", "source_description": "", "loader": "", "identifier": "stockitems", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"warehouse\".\"stockitems\"", "created_at": 1684076524.7046392}, "source.dbt_wwi.application.cities": {"database": "postgres", "schema": "application", "name": "cities", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/application/source.yml", "original_file_path": "models/staging/application/source.yml", "unique_id": "source.dbt_wwi.application.cities", "fqn": ["dbt_wwi", "staging", "application", "application", "cities"], "source_name": "application", "source_description": "", "loader": "", "identifier": "cities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"application\".\"cities\"", "created_at": 1684076524.7049675}, "source.dbt_wwi.application.countries": {"database": "postgres", "schema": "application", "name": "countries", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/application/source.yml", "original_file_path": "models/staging/application/source.yml", "unique_id": "source.dbt_wwi.application.countries", "fqn": ["dbt_wwi", "staging", "application", "application", "countries"], "source_name": "application", "source_description": "", "loader": "", "identifier": "countries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"application\".\"countries\"", "created_at": 1684076524.7051034}, "source.dbt_wwi.application.deliverymethods": {"database": "postgres", "schema": "application", "name": "deliverymethods", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/application/source.yml", "original_file_path": "models/staging/application/source.yml", "unique_id": "source.dbt_wwi.application.deliverymethods", "fqn": ["dbt_wwi", "staging", "application", "application", "deliverymethods"], "source_name": "application", "source_description": "", "loader": "", "identifier": "deliverymethods", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"application\".\"deliverymethods\"", "created_at": 1684076524.7052248}, "source.dbt_wwi.application.paymentmethods": {"database": "postgres", "schema": "application", "name": "paymentmethods", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/application/source.yml", "original_file_path": "models/staging/application/source.yml", "unique_id": "source.dbt_wwi.application.paymentmethods", "fqn": ["dbt_wwi", "staging", "application", "application", "paymentmethods"], "source_name": "application", "source_description": "", "loader": "", "identifier": "paymentmethods", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"application\".\"paymentmethods\"", "created_at": 1684076524.705378}, "source.dbt_wwi.application.people": {"database": "postgres", "schema": "application", "name": "people", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/application/source.yml", "original_file_path": "models/staging/application/source.yml", "unique_id": "source.dbt_wwi.application.people", "fqn": ["dbt_wwi", "staging", "application", "application", "people"], "source_name": "application", "source_description": "", "loader": "", "identifier": "people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"application\".\"people\"", "created_at": 1684076524.705516}, "source.dbt_wwi.application.stateprovinces": {"database": "postgres", "schema": "application", "name": "stateprovinces", "resource_type": "source", "package_name": "dbt_wwi", "path": "models/staging/application/source.yml", "original_file_path": "models/staging/application/source.yml", "unique_id": "source.dbt_wwi.application.stateprovinces", "fqn": ["dbt_wwi", "staging", "application", "application", "stateprovinces"], "source_name": "application", "source_description": "", "loader": "", "identifier": "stateprovinces", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"application\".\"stateprovinces\"", "created_at": 1684076524.7056363}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7033732, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7039378, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.70412, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7043257, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7045066, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7053201, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_postgres.get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7132337, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7141812, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7145994, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7150059, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.715605, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7160752, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7162976, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7167404, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.717253, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7183619, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.718611, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7190135, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7193742, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7199266, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7202213, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.720993, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.721265, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7214584, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7227142, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7236893, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7242749, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7245097, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7253802, "supported_languages": null}, "macro.dbt_postgres.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/columns_spec_ddl.sql", "original_file_path": "macros/utils/columns_spec_ddl.sql", "unique_id": "macro.dbt_postgres.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7259624, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7265906, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7271004, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7273648, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7311964, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.73321, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7348077, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.735772, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7360718, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7380173, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.738735, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7391171, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7408943, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7410982, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7422128, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7427344, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.743474, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7440557, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7442074, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.744877, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.745518, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.746137, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7475057, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7477605, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7479498, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7481349, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7483182, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7509062, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.75136, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7518349, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7523303, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.752709, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7578335, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7589931, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.759282, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7598846, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.760121, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.760308, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7604854, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.76066, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7608628, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.761035, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7616558, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7618897, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7634754, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7674067, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7685168, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7686725, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7693295, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7695456, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.769716, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7710538, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7715218, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7719376, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7728941, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.773121, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.773916, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7753792, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7757401, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select\n    {% for column in model['columns'] %}\n      {{ column }}{{ \", \" if not loop.last }}\n    {% endfor %}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7761033, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7791944, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.779729, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.779936, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7802112, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7807558, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7825818, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7855413, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7859182, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7862039, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7920043, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7936537, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.795225, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7963939, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7974648, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.797782, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7980359, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7983947, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7986307, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7989872, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.799232, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.799558, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7997913, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.7999816, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.800327, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8065145, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8085523, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8088717, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8101487, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8104951, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.811663, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8142836, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8150337, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.815898, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8161957, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.817145, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8179343, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8240302, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.824567, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8249211, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8317585, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8356555, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8358686, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8361561, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8370404, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8372455, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8374743, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8392289, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8408053, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8449094, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8452766, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.845506, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8456345, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8458219, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.845973, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8462343, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8473783, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8476179, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8479884, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8485358, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8489976, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8492396, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.849458, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.849695, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8503747, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8505683, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8507495, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8508875, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8510942, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8511915, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8514044, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8516085, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8523548, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8525674, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8528156, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8530278, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8533568, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8539548, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8557808, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8559287, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.856137, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8562775, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8567142, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8569515, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8570867, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8573701, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8576145, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8579097, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.858153, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8584714, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8594012, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.859632, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.859944, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.860224, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8618412, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8627198, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8636317, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.865995, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8662145, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8666556, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8669257, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql) %}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8670728, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8673062, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ col['data_type'] }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8681214, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8685172, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8687515, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8692024, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8695197, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.870275, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8706012, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8716154, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8721893, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8724098, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8726177, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8731482, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8748245, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8752599, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8755128, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.875725, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.876078, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8764007, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8766701, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8770552, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.877285, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8774998, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8810494, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8812659, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8815675, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8819444, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.882255, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.882667, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8829136, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.883196, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.883428, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8836367, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.883885, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8842392, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.884542, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8852086, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8854964, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8856766, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8859437, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.886258, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8866396, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8873503, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8877597, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8883634, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8887997, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.889179, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8897276, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8905022, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.891259, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8918307, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8921673, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8923962, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8927033, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.892845, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8931744, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8933675, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8937461, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.893935, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8949432, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8951404, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8953502, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8955536, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8957605, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.895966, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8961756, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8964229, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.896631, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8968408, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.897059, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8972757, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8975208, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8978539, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.898209, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8983479, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.898651, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8988142, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.8995354, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.900061, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9003406, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9004421, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9008858, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9011989, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9015567, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9017324, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.902004, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9021244, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9024599, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9026334, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9029365, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9031453, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9035137, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.90369, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9039848, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9041195, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9045198, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9048417, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9050293, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9053893, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.905671, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9060032, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9061413, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9067466, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9069598, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9072435, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9076223, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.90782, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9082344, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.908477, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9088807, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9090943, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9094934, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.909702, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9103143, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9106202, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.910982, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9113533, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.911782, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9124207, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9128282, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9132626, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9138458, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9146645, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9151926, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9161003, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9168353, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9179158, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9186792, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9198072, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9203804, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9207692, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9217122, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9231224, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.923743, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9242306, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9277139, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9299135, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9307144, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9313536, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9323947, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9336107, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9342272, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.934673, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9351585, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9356174, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9363291, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9367576, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9373355, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9379444, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9391196, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9405606, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.941266, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9421492, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.942973, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9440656, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9444473, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.944881, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9482436, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9525666, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9530714, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9534347, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9546192, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.955726, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9564087, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9574568, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.958332, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.958619, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9588816, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9591358, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9593596, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9595819, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9599276, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9602528, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9617321, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9639413, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9645722, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.965568, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9659915, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.966445, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.967269, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.968038, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9683263, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9687703, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9692326, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9695332, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9699786, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9701586, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9703472, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.971862, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9724338, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9730008, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9732387, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.973789, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9746935, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9754834, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9765432, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.97747, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.978058, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9782932, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.979068, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9804316, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9822445, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.983419, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9837554, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9844527, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9854612, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9866927, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.988619, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9891648, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9899945, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9918025, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.99227, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9931645, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9938123, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.99495, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.996713, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.997242, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.99808, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9984696, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9986498, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076523.9996843, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0002484, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0010386, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.001401, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0016599, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0019853, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0023592, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0026832, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0029032, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.003786, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0043955, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0068932, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0078807, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0090778, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0093632, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.postgres__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0095992, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0101259, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0103383, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0108094, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0112073, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0114496, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.012644, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0141752, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.015356, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0175724, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684076524.0186265, "supported_languages": null}, "macro.dbt_wwi.convert_date_id": {"name": "convert_date_id", "resource_type": "macro", "package_name": "dbt_wwi", "path": "macros/convert_date_id.sql", "original_file_path": "macros/convert_date_id.sql", "unique_id": "macro.dbt_wwi.convert_date_id", "macro_sql": "{%- macro convert_date_id(column_name) -%}\n    cast(\n            cast(extract(year from {{ column_name }}) as text) || \n            cast(extract(month from {{ column_name }}) as text) || \n            cast(extract(day from {{ column_name }}) as text)\n        as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684077982.505596, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.dbt_wwi.unique_dim_customers_customer_key.ad8156656e": [{"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dim_customers_customer_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dim_customers_customer_key.ad8156656e", "fqn": ["dbt_wwi", "marts", "core", "unique_dim_customers_customer_key"], "alias": "unique_dim_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684226311.6148818, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": null}], "test.dbt_wwi.not_null_dim_customers_customer_key.4bebfb3411": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_customers_customer_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_customers_customer_key.4bebfb3411", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_customers_customer_key"], "alias": "not_null_dim_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684226311.616631, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": null}], "test.dbt_wwi.not_null_dim_customers_customer_name.c8ab2d704d": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_customers_customer_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_customers_customer_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_customers_customer_name.c8ab2d704d", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_customers_customer_name"], "alias": "not_null_dim_customers_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684226311.6182857, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.dim_customers", "attached_node": null}], "test.dbt_wwi.not_null_dim_customers_open_date_key.bb71a0e71f": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "open_date_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dim_customers_open_date_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dim_customers_open_date_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dim_customers_open_date_key.bb71a0e71f", "fqn": ["dbt_wwi", "marts", "core", "not_null_dim_customers_open_date_key"], "alias": "not_null_dim_customers_open_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684226311.619905, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "open_date_key", "file_key_name": "models.dim_customers", "attached_node": null}], "test.dbt_wwi.unique_dime_sales_person_sales_person_key.46b6c5759e": [{"test_metadata": {"name": "unique", "kwargs": {"column_name": "sales_person_key", "model": "{{ get_where_subquery(ref('dime_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dime_sales_person_sales_person_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dime_sales_person_sales_person_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dime_sales_person_sales_person_key.46b6c5759e", "fqn": ["dbt_wwi", "marts", "core", "unique_dime_sales_person_sales_person_key"], "alias": "unique_dime_sales_person_sales_person_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684227187.719048, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dime_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_key", "file_key_name": "models.dime_sales_person", "attached_node": null}, {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sales_person_key", "model": "{{ get_where_subquery(ref('dime_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "unique_dime_sales_person_sales_person_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "unique_dime_sales_person_sales_person_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.unique_dime_sales_person_sales_person_key.46b6c5759e", "fqn": ["dbt_wwi", "marts", "core", "unique_dime_sales_person_sales_person_key"], "alias": "unique_dime_sales_person_sales_person_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228909.0467641, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dime_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_key", "file_key_name": "models.dime_sales_person", "attached_node": null}], "test.dbt_wwi.not_null_dime_sales_person_sales_person_key.77f2f75a75": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_person_key", "model": "{{ get_where_subquery(ref('dime_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dime_sales_person_sales_person_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dime_sales_person_sales_person_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dime_sales_person_sales_person_key.77f2f75a75", "fqn": ["dbt_wwi", "marts", "core", "not_null_dime_sales_person_sales_person_key"], "alias": "not_null_dime_sales_person_sales_person_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684227187.7213187, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dime_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_key", "file_key_name": "models.dime_sales_person", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_person_key", "model": "{{ get_where_subquery(ref('dime_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dime_sales_person_sales_person_key", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dime_sales_person_sales_person_key.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dime_sales_person_sales_person_key.77f2f75a75", "fqn": ["dbt_wwi", "marts", "core", "not_null_dime_sales_person_sales_person_key"], "alias": "not_null_dime_sales_person_sales_person_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228909.0485358, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dime_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sales_person_key", "file_key_name": "models.dime_sales_person", "attached_node": null}], "test.dbt_wwi.not_null_dime_sales_person_full_name.db5f8e2efa": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "full_name", "model": "{{ get_where_subquery(ref('dime_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dime_sales_person_full_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dime_sales_person_full_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dime_sales_person_full_name.db5f8e2efa", "fqn": ["dbt_wwi", "marts", "core", "not_null_dime_sales_person_full_name"], "alias": "not_null_dime_sales_person_full_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684227187.7235796, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dime_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "full_name", "file_key_name": "models.dime_sales_person", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "full_name", "model": "{{ get_where_subquery(ref('dime_sales_person')) }}"}, "namespace": null}, "database": "postgres", "schema": "dev_dbt_test__audit", "name": "not_null_dime_sales_person_full_name", "resource_type": "test", "package_name": "dbt_wwi", "path": "not_null_dime_sales_person_full_name.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.dbt_wwi.not_null_dime_sales_person_full_name.db5f8e2efa", "fqn": ["dbt_wwi", "marts", "core", "not_null_dime_sales_person_full_name"], "alias": "not_null_dime_sales_person_full_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684228909.050209, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dime_sales_person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "full_name", "file_key_name": "models.dime_sales_person", "attached_node": null}]}, "parent_map": {"model.dbt_wwi.stg_purchasing__suppliers": ["source.dbt_wwi.purchasing.suppliers"], "test.dbt_wwi.unique_stg_purchasing__suppliers_supplier_id.806200ef00": ["model.dbt_wwi.stg_purchasing__suppliers"], "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_id.2947739a50": ["model.dbt_wwi.stg_purchasing__suppliers"], "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_name.76903e56be": ["model.dbt_wwi.stg_purchasing__suppliers"], "model.dbt_wwi.stg_warehouse__package_types": ["source.dbt_wwi.warehouse.packagetypes"], "model.dbt_wwi.stg_warehouse__colors": ["source.dbt_wwi.warehouse.colors"], "test.dbt_wwi.unique_stg_warehouse__package_types_package_type_id.72a65a1cd9": ["model.dbt_wwi.stg_warehouse__package_types"], "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_id.8bf8266d62": ["model.dbt_wwi.stg_warehouse__package_types"], "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_name.a94b2a57ef": ["model.dbt_wwi.stg_warehouse__package_types"], "test.dbt_wwi.unique_stg_warehouse__colors_color_id.cfaa63344b": ["model.dbt_wwi.stg_warehouse__colors"], "test.dbt_wwi.not_null_stg_warehouse__colors_color_id.4ea7b6e380": ["model.dbt_wwi.stg_warehouse__colors"], "test.dbt_wwi.not_null_stg_warehouse__colors_color_name.055f820d71": ["model.dbt_wwi.stg_warehouse__colors"], "model.dbt_wwi.stg_warehouse__stock_items": ["source.dbt_wwi.warehouse.stockitems"], "test.dbt_wwi.unique_stg_warehouse__stock_items_stock_item_id.5a8e549571": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_id.48b59f2744": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_supplier_id.c71279a24c": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_.6709491269": ["model.dbt_wwi.stg_purchasing__suppliers", "model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_.766a0063a5": ["model.dbt_wwi.stg_warehouse__colors", "model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_package_id.408f335d10": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_.cbcc273fc1": ["model.dbt_wwi.stg_warehouse__package_types", "model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_name.2b25040d44": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_tax_rate.8f77ee01bd": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_price.103b0e4d0d": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_recommended_retail_price.5226987013": ["model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_warehouse__stock_items_quantity_per_outer.21df333f12": ["model.dbt_wwi.stg_warehouse__stock_items"], "model.dbt_wwi.stg_application__countries": ["source.dbt_wwi.application.countries"], "model.dbt_wwi.stg_application__delivery_methods": ["source.dbt_wwi.application.deliverymethods"], "model.dbt_wwi.stg_application__cities": ["source.dbt_wwi.application.cities"], "model.dbt_wwi.stg_application__state_provinces": ["source.dbt_wwi.application.stateprovinces"], "model.dbt_wwi.stg_application__person": ["source.dbt_wwi.application.people"], "test.dbt_wwi.unique_stg_application__cities_city_id.fa077fdf6a": ["model.dbt_wwi.stg_application__cities"], "test.dbt_wwi.not_null_stg_application__cities_city_id.103828a48c": ["model.dbt_wwi.stg_application__cities"], "test.dbt_wwi.not_null_stg_application__cities_state_province_id.86d0cbe053": ["model.dbt_wwi.stg_application__cities"], "test.dbt_wwi.relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_.1be9d8139b": ["model.dbt_wwi.stg_application__cities", "model.dbt_wwi.stg_application__state_provinces"], "test.dbt_wwi.not_null_stg_application__cities_city_name.ae761a86e4": ["model.dbt_wwi.stg_application__cities"], "test.dbt_wwi.unique_stg_application__countries_country_id.f063f93b91": ["model.dbt_wwi.stg_application__countries"], "test.dbt_wwi.not_null_stg_application__countries_country_id.b771a78461": ["model.dbt_wwi.stg_application__countries"], "test.dbt_wwi.not_null_stg_application__countries_country_name.4ba58a9e38": ["model.dbt_wwi.stg_application__countries"], "test.dbt_wwi.unique_stg_application__delivery_methods_delivery_method_id.74a5fe1981": ["model.dbt_wwi.stg_application__delivery_methods"], "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_id.b5f7f50b3f": ["model.dbt_wwi.stg_application__delivery_methods"], "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_name.50eefc71a7": ["model.dbt_wwi.stg_application__delivery_methods"], "test.dbt_wwi.unique_stg_application__person_person_id.cd16cab35f": ["model.dbt_wwi.stg_application__person"], "test.dbt_wwi.not_null_stg_application__person_person_id.9aeb92ab77": ["model.dbt_wwi.stg_application__person"], "test.dbt_wwi.not_null_stg_application__person_full_name.bca1f0749c": ["model.dbt_wwi.stg_application__person"], "test.dbt_wwi.unique_stg_application__state_provinces_state_province_id.9289bd8819": ["model.dbt_wwi.stg_application__state_provinces"], "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_id.e51f33a36b": ["model.dbt_wwi.stg_application__state_provinces"], "test.dbt_wwi.not_null_stg_application__state_provinces_country_id.7670c41b38": ["model.dbt_wwi.stg_application__state_provinces"], "test.dbt_wwi.relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_.6384db998c": ["model.dbt_wwi.stg_application__countries", "model.dbt_wwi.stg_application__state_provinces"], "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_name.988e0433bd": ["model.dbt_wwi.stg_application__state_provinces"], "model.dbt_wwi.dim_customer": ["model.dbt_wwi.location", "model.dbt_wwi.stg_sales__buying_groups", "model.dbt_wwi.stg_sales__customer_categories", "model.dbt_wwi.stg_sales__customers"], "model.dbt_wwi.dim_delivery_method": ["model.dbt_wwi.stg_application__delivery_methods"], "model.dbt_wwi.dim_product": ["model.dbt_wwi.stg_purchasing__suppliers", "model.dbt_wwi.stg_warehouse__colors", "model.dbt_wwi.stg_warehouse__package_types", "model.dbt_wwi.stg_warehouse__stock_items"], "model.dbt_wwi.dim_promotion": ["model.dbt_wwi.stg_sales__promotion"], "model.dbt_wwi.dim_sales_person": ["model.dbt_wwi.stg_application__person"], "test.dbt_wwi.unique_dim_customer_customer_key.7b0683cc6e": ["model.dbt_wwi.dim_customer"], "test.dbt_wwi.not_null_dim_customer_customer_key.c289fe4d1f": ["model.dbt_wwi.dim_customer"], "test.dbt_wwi.not_null_dim_customer_customer_name.a25ec89461": ["model.dbt_wwi.dim_customer"], "test.dbt_wwi.not_null_dim_customer_open_date_key.3284579e78": ["model.dbt_wwi.dim_customer"], "test.dbt_wwi.unique_dim_delivery_method_delivery_method_key.a13fd01d4f": ["model.dbt_wwi.dim_delivery_method"], "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_key.40189ae2cb": ["model.dbt_wwi.dim_delivery_method"], "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_name.5a4d86a0b9": ["model.dbt_wwi.dim_delivery_method"], "test.dbt_wwi.unique_dim_product_product_key.1753236bd0": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_product_key.f0e1d838d3": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_product_name.1b672622d5": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_supplier_name.563b46e4f8": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_color_name.ece801e98d": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_package_type_name.20c3a8f914": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_tax_rate.60e1ee82d7": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_unit_price.5870bf9926": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_recommended_retail_price.b902191698": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.not_null_dim_product_manufacturer.c9b44c9aaa": ["model.dbt_wwi.dim_product"], "test.dbt_wwi.unique_dim_promotion_promotion_key.6ffd828ac6": ["model.dbt_wwi.dim_promotion"], "test.dbt_wwi.not_null_dim_promotion_promotion_key.386ef2d6d5": ["model.dbt_wwi.dim_promotion"], "test.dbt_wwi.not_null_dim_promotion_start_date.c1f23c7ce1": ["model.dbt_wwi.dim_promotion"], "test.dbt_wwi.not_null_dim_promotion_end_date.52616a8a68": ["model.dbt_wwi.dim_promotion"], "test.dbt_wwi.unique_dim_sales_person_sales_person_key.f6979a9cdd": ["model.dbt_wwi.dim_sales_person"], "test.dbt_wwi.not_null_dim_sales_person_sales_person_key.8815020c17": ["model.dbt_wwi.dim_sales_person"], "test.dbt_wwi.not_null_dim_sales_person_full_name.500a965d8a": ["model.dbt_wwi.dim_sales_person"], "model.dbt_wwi.location": ["model.dbt_wwi.stg_application__cities", "model.dbt_wwi.stg_application__countries", "model.dbt_wwi.stg_application__state_provinces"], "test.dbt_wwi.unique_location_city_id.2fa1a73b73": ["model.dbt_wwi.location"], "test.dbt_wwi.not_null_location_city_id.e1ed76ae1a": ["model.dbt_wwi.location"], "test.dbt_wwi.not_null_location_state_province_id.1697d69162": ["model.dbt_wwi.location"], "test.dbt_wwi.not_null_location_country_id.40638877b5": ["model.dbt_wwi.location"], "test.dbt_wwi.not_null_location_city_name.16fb529c4b": ["model.dbt_wwi.location"], "test.dbt_wwi.not_null_location_state_province_name.d7bae06b47": ["model.dbt_wwi.location"], "test.dbt_wwi.not_null_location_country_name.60f752eb0c": ["model.dbt_wwi.location"], "model.dbt_wwi.dim_date": [], "test.dbt_wwi.not_null_dim_date_date_key.881d0a31b6": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_date.78f11e7735": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_year.aac8e263ab": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_month.180a460136": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_day.479b160c6f": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_quarter.4d9e627f51": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_day_of_week.45321d6610": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_day_of_year.3bba0003b4": ["model.dbt_wwi.dim_date"], "test.dbt_wwi.not_null_dim_date_week_of_year.eb48aa310d": ["model.dbt_wwi.dim_date"], "model.dbt_wwi.stg_sales__invoices": ["source.dbt_wwi.sales.invoices"], "model.dbt_wwi.stg_sales__buying_groups": ["source.dbt_wwi.sales.buyinggroups"], "model.dbt_wwi.stg_sales__customer_categories": ["source.dbt_wwi.sales.customercategories"], "model.dbt_wwi.stg_sales__invoice_lines": ["source.dbt_wwi.sales.invoicelines"], "model.dbt_wwi.stg_sales__promotion": ["source.dbt_wwi.sales.specialdeals"], "model.dbt_wwi.stg_sales__customers": ["source.dbt_wwi.sales.customers"], "test.dbt_wwi.unique_stg_sales__invoices_invoice_id.15e534463a": ["model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.not_null_stg_sales__invoices_invoice_id.aed8d6f70c": ["model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.not_null_stg_sales__invoices_customer_id.aa7e734166": ["model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_.4bb604faad": ["model.dbt_wwi.stg_sales__customers", "model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.not_null_stg_sales__invoices_delivery_method_id.0c0534e618": ["model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_.70fefa2cb4": ["model.dbt_wwi.stg_application__delivery_methods", "model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.not_null_stg_sales__invoices_sales_person_id.9614218ea9": ["model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_.c22f7e6b36": ["model.dbt_wwi.stg_application__person", "model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.not_null_stg_sales__invoices_invoice_date.91843eac96": ["model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.unique_stg_sales__buying_groups_buying_group_id.9a77cfb92c": ["model.dbt_wwi.stg_sales__buying_groups"], "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_id.ae3899f865": ["model.dbt_wwi.stg_sales__buying_groups"], "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_name.9cf6de1de9": ["model.dbt_wwi.stg_sales__buying_groups"], "test.dbt_wwi.unique_stg_sales__customer_categories_customer_category_id.6ecaf503c1": ["model.dbt_wwi.stg_sales__customer_categories"], "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_id.158348b35b": ["model.dbt_wwi.stg_sales__customer_categories"], "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_name.1170547d0f": ["model.dbt_wwi.stg_sales__customer_categories"], "test.dbt_wwi.unique_stg_sales__invoice_lines_invoice_line_id.441f0eae02": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_line_id.0ea422f242": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_id.b89ed31727": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_.fa1525f7bc": ["model.dbt_wwi.stg_sales__invoice_lines", "model.dbt_wwi.stg_sales__invoices"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_stock_item_id.bfd26104dd": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_.ed736b707e": ["model.dbt_wwi.stg_sales__invoice_lines", "model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_package_type_id.0c7567c276": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_.66c5f9ed45": ["model.dbt_wwi.stg_sales__invoice_lines", "model.dbt_wwi.stg_warehouse__package_types"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_quantity.100270ee43": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_unit_price.e5048bc1f0": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_rate.045b23031c": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_amount.b1f09b92f4": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_line_profix.bc2544d172": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.not_null_stg_sales__invoice_lines_extended_price.9e5c7ccb79": ["model.dbt_wwi.stg_sales__invoice_lines"], "test.dbt_wwi.unique_stg_sales__promotion_promotion_id.606fbaed77": ["model.dbt_wwi.stg_sales__promotion"], "test.dbt_wwi.not_null_stg_sales__promotion_promotion_id.2151b5e183": ["model.dbt_wwi.stg_sales__promotion"], "test.dbt_wwi.not_null_stg_sales__promotion_buying_group_id.5a3b7e5ddf": ["model.dbt_wwi.stg_sales__promotion"], "test.dbt_wwi.relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.ec7e210839": ["model.dbt_wwi.stg_sales__buying_groups", "model.dbt_wwi.stg_sales__promotion"], "test.dbt_wwi.not_null_stg_sales__promotion_start_date.7e8ee6fa4c": ["model.dbt_wwi.stg_sales__promotion"], "test.dbt_wwi.not_null_stg_sales__promotion_end_date.653386ad3f": ["model.dbt_wwi.stg_sales__promotion"], "test.dbt_wwi.unique_stg_sales__customers_customer_id.e3f788371a": ["model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.not_null_stg_sales__customers_customer_id.50b2c8c1cb": ["model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.not_null_stg_sales__customers_customer_category_id.e6cdeed3e2": ["model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_.749d3b1100": ["model.dbt_wwi.stg_sales__customer_categories", "model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.653446fb64": ["model.dbt_wwi.stg_sales__buying_groups", "model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.not_null_stg_sales__customers_delivery_city_id.501bbcf4ae": ["model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_.f60f8816e9": ["model.dbt_wwi.stg_application__cities", "model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.not_null_stg_sales__customers_customer_name.7dbb6b1afc": ["model.dbt_wwi.stg_sales__customers"], "test.dbt_wwi.not_null_stg_sales__customers_account_opened_date.c2d72d1414": ["model.dbt_wwi.stg_sales__customers"], "model.dbt_wwi.fct_sales": ["model.dbt_wwi.stg_application__delivery_methods", "model.dbt_wwi.stg_application__person", "model.dbt_wwi.stg_sales__customers", "model.dbt_wwi.stg_sales__invoice_lines", "model.dbt_wwi.stg_sales__invoices", "model.dbt_wwi.stg_sales__promotion", "model.dbt_wwi.stg_warehouse__stock_items"], "test.dbt_wwi.not_null_fct_sales_invoice_key.71afb5d98d": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_net_unit_price.c556a2fd44": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_regular_unit_price.588fd4fef8": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_line_profit.b098766d55": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_quantity.a4800a70aa": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_discount_unit_price.972f6b60ad": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_unit_profit.d6e5840af3": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_unit_cost.5c3b7a8b18": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_gross_revenue.8351f78838": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_net_revenue.d8fb04cf50": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_cost_amount.30a03725e5": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_gross_profit.5466549c9a": ["model.dbt_wwi.fct_sales"], "test.dbt_wwi.not_null_fct_sales_net_profit.22e6da73e5": ["model.dbt_wwi.fct_sales"], "source.dbt_wwi.sales.buyinggroups": [], "source.dbt_wwi.sales.customercategories": [], "source.dbt_wwi.sales.customers": [], "source.dbt_wwi.sales.invoicelines": [], "source.dbt_wwi.sales.invoices": [], "source.dbt_wwi.sales.specialdeals": [], "source.dbt_wwi.purchasing.suppliers": [], "source.dbt_wwi.warehouse.colors": [], "source.dbt_wwi.warehouse.packagetypes": [], "source.dbt_wwi.warehouse.stockitems": [], "source.dbt_wwi.application.cities": [], "source.dbt_wwi.application.countries": [], "source.dbt_wwi.application.deliverymethods": [], "source.dbt_wwi.application.paymentmethods": [], "source.dbt_wwi.application.people": [], "source.dbt_wwi.application.stateprovinces": []}, "child_map": {"model.dbt_wwi.stg_purchasing__suppliers": ["model.dbt_wwi.dim_product", "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_id.2947739a50", "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_name.76903e56be", "test.dbt_wwi.relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_.6709491269", "test.dbt_wwi.unique_stg_purchasing__suppliers_supplier_id.806200ef00"], "test.dbt_wwi.unique_stg_purchasing__suppliers_supplier_id.806200ef00": [], "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_id.2947739a50": [], "test.dbt_wwi.not_null_stg_purchasing__suppliers_supplier_name.76903e56be": [], "model.dbt_wwi.stg_warehouse__package_types": ["model.dbt_wwi.dim_product", "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_id.8bf8266d62", "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_name.a94b2a57ef", "test.dbt_wwi.relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_.66c5f9ed45", "test.dbt_wwi.relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_.cbcc273fc1", "test.dbt_wwi.unique_stg_warehouse__package_types_package_type_id.72a65a1cd9"], "model.dbt_wwi.stg_warehouse__colors": ["model.dbt_wwi.dim_product", "test.dbt_wwi.not_null_stg_warehouse__colors_color_id.4ea7b6e380", "test.dbt_wwi.not_null_stg_warehouse__colors_color_name.055f820d71", "test.dbt_wwi.relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_.766a0063a5", "test.dbt_wwi.unique_stg_warehouse__colors_color_id.cfaa63344b"], "test.dbt_wwi.unique_stg_warehouse__package_types_package_type_id.72a65a1cd9": [], "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_id.8bf8266d62": [], "test.dbt_wwi.not_null_stg_warehouse__package_types_package_type_name.a94b2a57ef": [], "test.dbt_wwi.unique_stg_warehouse__colors_color_id.cfaa63344b": [], "test.dbt_wwi.not_null_stg_warehouse__colors_color_id.4ea7b6e380": [], "test.dbt_wwi.not_null_stg_warehouse__colors_color_name.055f820d71": [], "model.dbt_wwi.stg_warehouse__stock_items": ["model.dbt_wwi.dim_product", "model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_warehouse__stock_items_quantity_per_outer.21df333f12", "test.dbt_wwi.not_null_stg_warehouse__stock_items_recommended_retail_price.5226987013", "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_id.48b59f2744", "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_name.2b25040d44", "test.dbt_wwi.not_null_stg_warehouse__stock_items_supplier_id.c71279a24c", "test.dbt_wwi.not_null_stg_warehouse__stock_items_tax_rate.8f77ee01bd", "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_package_id.408f335d10", "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_price.103b0e4d0d", "test.dbt_wwi.relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_.ed736b707e", "test.dbt_wwi.relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_.766a0063a5", "test.dbt_wwi.relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_.6709491269", "test.dbt_wwi.relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_.cbcc273fc1", "test.dbt_wwi.unique_stg_warehouse__stock_items_stock_item_id.5a8e549571"], "test.dbt_wwi.unique_stg_warehouse__stock_items_stock_item_id.5a8e549571": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_id.48b59f2744": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_supplier_id.c71279a24c": [], "test.dbt_wwi.relationships_stg_warehouse__stock_items_supplier_id__supplier_id__ref_stg_purchasing__suppliers_.6709491269": [], "test.dbt_wwi.relationships_stg_warehouse__stock_items_color_id__color_id__ref_stg_warehouse__colors_.766a0063a5": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_package_id.408f335d10": [], "test.dbt_wwi.relationships_stg_warehouse__stock_items_unit_package_id__package_type_id__ref_stg_warehouse__package_types_.cbcc273fc1": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_stock_item_name.2b25040d44": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_tax_rate.8f77ee01bd": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_unit_price.103b0e4d0d": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_recommended_retail_price.5226987013": [], "test.dbt_wwi.not_null_stg_warehouse__stock_items_quantity_per_outer.21df333f12": [], "model.dbt_wwi.stg_application__countries": ["model.dbt_wwi.location", "test.dbt_wwi.not_null_stg_application__countries_country_id.b771a78461", "test.dbt_wwi.not_null_stg_application__countries_country_name.4ba58a9e38", "test.dbt_wwi.relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_.6384db998c", "test.dbt_wwi.unique_stg_application__countries_country_id.f063f93b91"], "model.dbt_wwi.stg_application__delivery_methods": ["model.dbt_wwi.dim_delivery_method", "model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_id.b5f7f50b3f", "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_name.50eefc71a7", "test.dbt_wwi.relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_.70fefa2cb4", "test.dbt_wwi.unique_stg_application__delivery_methods_delivery_method_id.74a5fe1981"], "model.dbt_wwi.stg_application__cities": ["model.dbt_wwi.location", "test.dbt_wwi.not_null_stg_application__cities_city_id.103828a48c", "test.dbt_wwi.not_null_stg_application__cities_city_name.ae761a86e4", "test.dbt_wwi.not_null_stg_application__cities_state_province_id.86d0cbe053", "test.dbt_wwi.relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_.1be9d8139b", "test.dbt_wwi.relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_.f60f8816e9", "test.dbt_wwi.unique_stg_application__cities_city_id.fa077fdf6a"], "model.dbt_wwi.stg_application__state_provinces": ["model.dbt_wwi.location", "test.dbt_wwi.not_null_stg_application__state_provinces_country_id.7670c41b38", "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_id.e51f33a36b", "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_name.988e0433bd", "test.dbt_wwi.relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_.1be9d8139b", "test.dbt_wwi.relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_.6384db998c", "test.dbt_wwi.unique_stg_application__state_provinces_state_province_id.9289bd8819"], "model.dbt_wwi.stg_application__person": ["model.dbt_wwi.dim_sales_person", "model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_application__person_full_name.bca1f0749c", "test.dbt_wwi.not_null_stg_application__person_person_id.9aeb92ab77", "test.dbt_wwi.relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_.c22f7e6b36", "test.dbt_wwi.unique_stg_application__person_person_id.cd16cab35f"], "test.dbt_wwi.unique_stg_application__cities_city_id.fa077fdf6a": [], "test.dbt_wwi.not_null_stg_application__cities_city_id.103828a48c": [], "test.dbt_wwi.not_null_stg_application__cities_state_province_id.86d0cbe053": [], "test.dbt_wwi.relationships_stg_application__cities_state_province_id__state_province_id__ref_stg_application__state_provinces_.1be9d8139b": [], "test.dbt_wwi.not_null_stg_application__cities_city_name.ae761a86e4": [], "test.dbt_wwi.unique_stg_application__countries_country_id.f063f93b91": [], "test.dbt_wwi.not_null_stg_application__countries_country_id.b771a78461": [], "test.dbt_wwi.not_null_stg_application__countries_country_name.4ba58a9e38": [], "test.dbt_wwi.unique_stg_application__delivery_methods_delivery_method_id.74a5fe1981": [], "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_id.b5f7f50b3f": [], "test.dbt_wwi.not_null_stg_application__delivery_methods_delivery_method_name.50eefc71a7": [], "test.dbt_wwi.unique_stg_application__person_person_id.cd16cab35f": [], "test.dbt_wwi.not_null_stg_application__person_person_id.9aeb92ab77": [], "test.dbt_wwi.not_null_stg_application__person_full_name.bca1f0749c": [], "test.dbt_wwi.unique_stg_application__state_provinces_state_province_id.9289bd8819": [], "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_id.e51f33a36b": [], "test.dbt_wwi.not_null_stg_application__state_provinces_country_id.7670c41b38": [], "test.dbt_wwi.relationships_stg_application__state_provinces_country_id__country_id__ref_stg_application__countries_.6384db998c": [], "test.dbt_wwi.not_null_stg_application__state_provinces_state_province_name.988e0433bd": [], "model.dbt_wwi.dim_customer": ["test.dbt_wwi.not_null_dim_customer_customer_key.c289fe4d1f", "test.dbt_wwi.not_null_dim_customer_customer_name.a25ec89461", "test.dbt_wwi.not_null_dim_customer_open_date_key.3284579e78", "test.dbt_wwi.unique_dim_customer_customer_key.7b0683cc6e"], "model.dbt_wwi.dim_delivery_method": ["test.dbt_wwi.not_null_dim_delivery_method_delivery_method_key.40189ae2cb", "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_name.5a4d86a0b9", "test.dbt_wwi.unique_dim_delivery_method_delivery_method_key.a13fd01d4f"], "model.dbt_wwi.dim_product": ["test.dbt_wwi.not_null_dim_product_color_name.ece801e98d", "test.dbt_wwi.not_null_dim_product_manufacturer.c9b44c9aaa", "test.dbt_wwi.not_null_dim_product_package_type_name.20c3a8f914", "test.dbt_wwi.not_null_dim_product_product_key.f0e1d838d3", "test.dbt_wwi.not_null_dim_product_product_name.1b672622d5", "test.dbt_wwi.not_null_dim_product_recommended_retail_price.b902191698", "test.dbt_wwi.not_null_dim_product_supplier_name.563b46e4f8", "test.dbt_wwi.not_null_dim_product_tax_rate.60e1ee82d7", "test.dbt_wwi.not_null_dim_product_unit_price.5870bf9926", "test.dbt_wwi.unique_dim_product_product_key.1753236bd0"], "model.dbt_wwi.dim_promotion": ["test.dbt_wwi.not_null_dim_promotion_end_date.52616a8a68", "test.dbt_wwi.not_null_dim_promotion_promotion_key.386ef2d6d5", "test.dbt_wwi.not_null_dim_promotion_start_date.c1f23c7ce1", "test.dbt_wwi.unique_dim_promotion_promotion_key.6ffd828ac6"], "model.dbt_wwi.dim_sales_person": ["test.dbt_wwi.not_null_dim_sales_person_full_name.500a965d8a", "test.dbt_wwi.not_null_dim_sales_person_sales_person_key.8815020c17", "test.dbt_wwi.unique_dim_sales_person_sales_person_key.f6979a9cdd"], "test.dbt_wwi.unique_dim_customer_customer_key.7b0683cc6e": [], "test.dbt_wwi.not_null_dim_customer_customer_key.c289fe4d1f": [], "test.dbt_wwi.not_null_dim_customer_customer_name.a25ec89461": [], "test.dbt_wwi.not_null_dim_customer_open_date_key.3284579e78": [], "test.dbt_wwi.unique_dim_delivery_method_delivery_method_key.a13fd01d4f": [], "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_key.40189ae2cb": [], "test.dbt_wwi.not_null_dim_delivery_method_delivery_method_name.5a4d86a0b9": [], "test.dbt_wwi.unique_dim_product_product_key.1753236bd0": [], "test.dbt_wwi.not_null_dim_product_product_key.f0e1d838d3": [], "test.dbt_wwi.not_null_dim_product_product_name.1b672622d5": [], "test.dbt_wwi.not_null_dim_product_supplier_name.563b46e4f8": [], "test.dbt_wwi.not_null_dim_product_color_name.ece801e98d": [], "test.dbt_wwi.not_null_dim_product_package_type_name.20c3a8f914": [], "test.dbt_wwi.not_null_dim_product_tax_rate.60e1ee82d7": [], "test.dbt_wwi.not_null_dim_product_unit_price.5870bf9926": [], "test.dbt_wwi.not_null_dim_product_recommended_retail_price.b902191698": [], "test.dbt_wwi.not_null_dim_product_manufacturer.c9b44c9aaa": [], "test.dbt_wwi.unique_dim_promotion_promotion_key.6ffd828ac6": [], "test.dbt_wwi.not_null_dim_promotion_promotion_key.386ef2d6d5": [], "test.dbt_wwi.not_null_dim_promotion_start_date.c1f23c7ce1": [], "test.dbt_wwi.not_null_dim_promotion_end_date.52616a8a68": [], "test.dbt_wwi.unique_dim_sales_person_sales_person_key.f6979a9cdd": [], "test.dbt_wwi.not_null_dim_sales_person_sales_person_key.8815020c17": [], "test.dbt_wwi.not_null_dim_sales_person_full_name.500a965d8a": [], "model.dbt_wwi.location": ["model.dbt_wwi.dim_customer", "test.dbt_wwi.not_null_location_city_id.e1ed76ae1a", "test.dbt_wwi.not_null_location_city_name.16fb529c4b", "test.dbt_wwi.not_null_location_country_id.40638877b5", "test.dbt_wwi.not_null_location_country_name.60f752eb0c", "test.dbt_wwi.not_null_location_state_province_id.1697d69162", "test.dbt_wwi.not_null_location_state_province_name.d7bae06b47", "test.dbt_wwi.unique_location_city_id.2fa1a73b73"], "test.dbt_wwi.unique_location_city_id.2fa1a73b73": [], "test.dbt_wwi.not_null_location_city_id.e1ed76ae1a": [], "test.dbt_wwi.not_null_location_state_province_id.1697d69162": [], "test.dbt_wwi.not_null_location_country_id.40638877b5": [], "test.dbt_wwi.not_null_location_city_name.16fb529c4b": [], "test.dbt_wwi.not_null_location_state_province_name.d7bae06b47": [], "test.dbt_wwi.not_null_location_country_name.60f752eb0c": [], "model.dbt_wwi.dim_date": ["test.dbt_wwi.not_null_dim_date_date.78f11e7735", "test.dbt_wwi.not_null_dim_date_date_key.881d0a31b6", "test.dbt_wwi.not_null_dim_date_day.479b160c6f", "test.dbt_wwi.not_null_dim_date_day_of_week.45321d6610", "test.dbt_wwi.not_null_dim_date_day_of_year.3bba0003b4", "test.dbt_wwi.not_null_dim_date_month.180a460136", "test.dbt_wwi.not_null_dim_date_quarter.4d9e627f51", "test.dbt_wwi.not_null_dim_date_week_of_year.eb48aa310d", "test.dbt_wwi.not_null_dim_date_year.aac8e263ab"], "test.dbt_wwi.not_null_dim_date_date_key.881d0a31b6": [], "test.dbt_wwi.not_null_dim_date_date.78f11e7735": [], "test.dbt_wwi.not_null_dim_date_year.aac8e263ab": [], "test.dbt_wwi.not_null_dim_date_month.180a460136": [], "test.dbt_wwi.not_null_dim_date_day.479b160c6f": [], "test.dbt_wwi.not_null_dim_date_quarter.4d9e627f51": [], "test.dbt_wwi.not_null_dim_date_day_of_week.45321d6610": [], "test.dbt_wwi.not_null_dim_date_day_of_year.3bba0003b4": [], "test.dbt_wwi.not_null_dim_date_week_of_year.eb48aa310d": [], "model.dbt_wwi.stg_sales__invoices": ["model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_sales__invoices_customer_id.aa7e734166", "test.dbt_wwi.not_null_stg_sales__invoices_delivery_method_id.0c0534e618", "test.dbt_wwi.not_null_stg_sales__invoices_invoice_date.91843eac96", "test.dbt_wwi.not_null_stg_sales__invoices_invoice_id.aed8d6f70c", "test.dbt_wwi.not_null_stg_sales__invoices_sales_person_id.9614218ea9", "test.dbt_wwi.relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_.fa1525f7bc", "test.dbt_wwi.relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_.4bb604faad", "test.dbt_wwi.relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_.70fefa2cb4", "test.dbt_wwi.relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_.c22f7e6b36", "test.dbt_wwi.unique_stg_sales__invoices_invoice_id.15e534463a"], "model.dbt_wwi.stg_sales__buying_groups": ["model.dbt_wwi.dim_customer", "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_id.ae3899f865", "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_name.9cf6de1de9", "test.dbt_wwi.relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.653446fb64", "test.dbt_wwi.relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.ec7e210839", "test.dbt_wwi.unique_stg_sales__buying_groups_buying_group_id.9a77cfb92c"], "model.dbt_wwi.stg_sales__customer_categories": ["model.dbt_wwi.dim_customer", "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_id.158348b35b", "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_name.1170547d0f", "test.dbt_wwi.relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_.749d3b1100", "test.dbt_wwi.unique_stg_sales__customer_categories_customer_category_id.6ecaf503c1"], "model.dbt_wwi.stg_sales__invoice_lines": ["model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_sales__invoice_lines_extended_price.9e5c7ccb79", "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_id.b89ed31727", "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_line_id.0ea422f242", "test.dbt_wwi.not_null_stg_sales__invoice_lines_line_profix.bc2544d172", "test.dbt_wwi.not_null_stg_sales__invoice_lines_package_type_id.0c7567c276", "test.dbt_wwi.not_null_stg_sales__invoice_lines_quantity.100270ee43", "test.dbt_wwi.not_null_stg_sales__invoice_lines_stock_item_id.bfd26104dd", "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_amount.b1f09b92f4", "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_rate.045b23031c", "test.dbt_wwi.not_null_stg_sales__invoice_lines_unit_price.e5048bc1f0", "test.dbt_wwi.relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_.fa1525f7bc", "test.dbt_wwi.relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_.66c5f9ed45", "test.dbt_wwi.relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_.ed736b707e", "test.dbt_wwi.unique_stg_sales__invoice_lines_invoice_line_id.441f0eae02"], "model.dbt_wwi.stg_sales__promotion": ["model.dbt_wwi.dim_promotion", "model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_sales__promotion_buying_group_id.5a3b7e5ddf", "test.dbt_wwi.not_null_stg_sales__promotion_end_date.653386ad3f", "test.dbt_wwi.not_null_stg_sales__promotion_promotion_id.2151b5e183", "test.dbt_wwi.not_null_stg_sales__promotion_start_date.7e8ee6fa4c", "test.dbt_wwi.relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.ec7e210839", "test.dbt_wwi.unique_stg_sales__promotion_promotion_id.606fbaed77"], "model.dbt_wwi.stg_sales__customers": ["model.dbt_wwi.dim_customer", "model.dbt_wwi.fct_sales", "test.dbt_wwi.not_null_stg_sales__customers_account_opened_date.c2d72d1414", "test.dbt_wwi.not_null_stg_sales__customers_customer_category_id.e6cdeed3e2", "test.dbt_wwi.not_null_stg_sales__customers_customer_id.50b2c8c1cb", "test.dbt_wwi.not_null_stg_sales__customers_customer_name.7dbb6b1afc", "test.dbt_wwi.not_null_stg_sales__customers_delivery_city_id.501bbcf4ae", "test.dbt_wwi.relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.653446fb64", "test.dbt_wwi.relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_.749d3b1100", "test.dbt_wwi.relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_.f60f8816e9", "test.dbt_wwi.relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_.4bb604faad", "test.dbt_wwi.unique_stg_sales__customers_customer_id.e3f788371a"], "test.dbt_wwi.unique_stg_sales__invoices_invoice_id.15e534463a": [], "test.dbt_wwi.not_null_stg_sales__invoices_invoice_id.aed8d6f70c": [], "test.dbt_wwi.not_null_stg_sales__invoices_customer_id.aa7e734166": [], "test.dbt_wwi.relationships_stg_sales__invoices_customer_id__customer_id__ref_stg_sales__customers_.4bb604faad": [], "test.dbt_wwi.not_null_stg_sales__invoices_delivery_method_id.0c0534e618": [], "test.dbt_wwi.relationships_stg_sales__invoices_delivery_method_id__delivery_method_id__ref_stg_application__delivery_methods_.70fefa2cb4": [], "test.dbt_wwi.not_null_stg_sales__invoices_sales_person_id.9614218ea9": [], "test.dbt_wwi.relationships_stg_sales__invoices_sales_person_id__person_id__ref_stg_application__person_.c22f7e6b36": [], "test.dbt_wwi.not_null_stg_sales__invoices_invoice_date.91843eac96": [], "test.dbt_wwi.unique_stg_sales__buying_groups_buying_group_id.9a77cfb92c": [], "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_id.ae3899f865": [], "test.dbt_wwi.not_null_stg_sales__buying_groups_buying_group_name.9cf6de1de9": [], "test.dbt_wwi.unique_stg_sales__customer_categories_customer_category_id.6ecaf503c1": [], "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_id.158348b35b": [], "test.dbt_wwi.not_null_stg_sales__customer_categories_customer_category_name.1170547d0f": [], "test.dbt_wwi.unique_stg_sales__invoice_lines_invoice_line_id.441f0eae02": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_line_id.0ea422f242": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_invoice_id.b89ed31727": [], "test.dbt_wwi.relationships_stg_sales__invoice_lines_invoice_id__invoice_id__ref_stg_sales__invoices_.fa1525f7bc": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_stock_item_id.bfd26104dd": [], "test.dbt_wwi.relationships_stg_sales__invoice_lines_stock_item_id__stock_item_id__ref_stg_warehouse__stock_items_.ed736b707e": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_package_type_id.0c7567c276": [], "test.dbt_wwi.relationships_stg_sales__invoice_lines_package_type_id__package_type_id__ref_stg_warehouse__package_types_.66c5f9ed45": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_quantity.100270ee43": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_unit_price.e5048bc1f0": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_rate.045b23031c": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_tax_amount.b1f09b92f4": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_line_profix.bc2544d172": [], "test.dbt_wwi.not_null_stg_sales__invoice_lines_extended_price.9e5c7ccb79": [], "test.dbt_wwi.unique_stg_sales__promotion_promotion_id.606fbaed77": [], "test.dbt_wwi.not_null_stg_sales__promotion_promotion_id.2151b5e183": [], "test.dbt_wwi.not_null_stg_sales__promotion_buying_group_id.5a3b7e5ddf": [], "test.dbt_wwi.relationships_stg_sales__promotion_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.ec7e210839": [], "test.dbt_wwi.not_null_stg_sales__promotion_start_date.7e8ee6fa4c": [], "test.dbt_wwi.not_null_stg_sales__promotion_end_date.653386ad3f": [], "test.dbt_wwi.unique_stg_sales__customers_customer_id.e3f788371a": [], "test.dbt_wwi.not_null_stg_sales__customers_customer_id.50b2c8c1cb": [], "test.dbt_wwi.not_null_stg_sales__customers_customer_category_id.e6cdeed3e2": [], "test.dbt_wwi.relationships_stg_sales__customers_customer_category_id__customer_category_id__ref_stg_sales__customer_categories_.749d3b1100": [], "test.dbt_wwi.relationships_stg_sales__customers_buying_group_id__buying_group_id__ref_stg_sales__buying_groups_.653446fb64": [], "test.dbt_wwi.not_null_stg_sales__customers_delivery_city_id.501bbcf4ae": [], "test.dbt_wwi.relationships_stg_sales__customers_delivery_city_id__city_id__ref_stg_application__cities_.f60f8816e9": [], "test.dbt_wwi.not_null_stg_sales__customers_customer_name.7dbb6b1afc": [], "test.dbt_wwi.not_null_stg_sales__customers_account_opened_date.c2d72d1414": [], "model.dbt_wwi.fct_sales": ["test.dbt_wwi.not_null_fct_sales_cost_amount.30a03725e5", "test.dbt_wwi.not_null_fct_sales_discount_unit_price.972f6b60ad", "test.dbt_wwi.not_null_fct_sales_gross_profit.5466549c9a", "test.dbt_wwi.not_null_fct_sales_gross_revenue.8351f78838", "test.dbt_wwi.not_null_fct_sales_invoice_key.71afb5d98d", "test.dbt_wwi.not_null_fct_sales_line_profit.b098766d55", "test.dbt_wwi.not_null_fct_sales_net_profit.22e6da73e5", "test.dbt_wwi.not_null_fct_sales_net_revenue.d8fb04cf50", "test.dbt_wwi.not_null_fct_sales_net_unit_price.c556a2fd44", "test.dbt_wwi.not_null_fct_sales_quantity.a4800a70aa", "test.dbt_wwi.not_null_fct_sales_regular_unit_price.588fd4fef8", "test.dbt_wwi.not_null_fct_sales_unit_cost.5c3b7a8b18", "test.dbt_wwi.not_null_fct_sales_unit_profit.d6e5840af3"], "test.dbt_wwi.not_null_fct_sales_invoice_key.71afb5d98d": [], "test.dbt_wwi.not_null_fct_sales_net_unit_price.c556a2fd44": [], "test.dbt_wwi.not_null_fct_sales_regular_unit_price.588fd4fef8": [], "test.dbt_wwi.not_null_fct_sales_line_profit.b098766d55": [], "test.dbt_wwi.not_null_fct_sales_quantity.a4800a70aa": [], "test.dbt_wwi.not_null_fct_sales_discount_unit_price.972f6b60ad": [], "test.dbt_wwi.not_null_fct_sales_unit_profit.d6e5840af3": [], "test.dbt_wwi.not_null_fct_sales_unit_cost.5c3b7a8b18": [], "test.dbt_wwi.not_null_fct_sales_gross_revenue.8351f78838": [], "test.dbt_wwi.not_null_fct_sales_net_revenue.d8fb04cf50": [], "test.dbt_wwi.not_null_fct_sales_cost_amount.30a03725e5": [], "test.dbt_wwi.not_null_fct_sales_gross_profit.5466549c9a": [], "test.dbt_wwi.not_null_fct_sales_net_profit.22e6da73e5": [], "source.dbt_wwi.sales.buyinggroups": ["model.dbt_wwi.stg_sales__buying_groups"], "source.dbt_wwi.sales.customercategories": ["model.dbt_wwi.stg_sales__customer_categories"], "source.dbt_wwi.sales.customers": ["model.dbt_wwi.stg_sales__customers"], "source.dbt_wwi.sales.invoicelines": ["model.dbt_wwi.stg_sales__invoice_lines"], "source.dbt_wwi.sales.invoices": ["model.dbt_wwi.stg_sales__invoices"], "source.dbt_wwi.sales.specialdeals": ["model.dbt_wwi.stg_sales__promotion"], "source.dbt_wwi.purchasing.suppliers": ["model.dbt_wwi.stg_purchasing__suppliers"], "source.dbt_wwi.warehouse.colors": ["model.dbt_wwi.stg_warehouse__colors"], "source.dbt_wwi.warehouse.packagetypes": ["model.dbt_wwi.stg_warehouse__package_types"], "source.dbt_wwi.warehouse.stockitems": ["model.dbt_wwi.stg_warehouse__stock_items"], "source.dbt_wwi.application.cities": ["model.dbt_wwi.stg_application__cities"], "source.dbt_wwi.application.countries": ["model.dbt_wwi.stg_application__countries"], "source.dbt_wwi.application.deliverymethods": ["model.dbt_wwi.stg_application__delivery_methods"], "source.dbt_wwi.application.paymentmethods": [], "source.dbt_wwi.application.people": ["model.dbt_wwi.stg_application__person"], "source.dbt_wwi.application.stateprovinces": ["model.dbt_wwi.stg_application__state_provinces"]}, "group_map": {}}